{
    "CBaseModelInfo": {
        "FromAddress": {
            "Example": "CBaseModelInfo CBaseModelInfo.FromAddress(int address)"
        },
        "GetAddress": {
            "Example": "int object:GetAddress()"
        },
        "IsObject": {
            "Example": "bool object:IsObject()"
        },
        "IsPed": {
            "Example": "bool object:IsPed()"
        },
        "IsVehicle": {
            "Example": "bool object:IsVehicle()"
        },
        "IsWorldObject": {
            "Example": "bool object:IsWorldObject()"
        },
        "Model": {
            "Example": "int object.Model"
        },
        "ModelIndex": {
            "Example": "int object.ModelIndex"
        }
    },
    "CDoorCreationDataNode": {
        "DoorModel": {
            "Description": "0xC0",
            "Example": "int object.DoorModel"
        }
    },
    "CDynamicEntityGameStateDataNode": {
        "InteriorProxyLoc": {
            "Description": "0x00C0",
            "Example": "int object.InteriorProxyLoc"
        },
        "decoratorListCount": {
            "Description": "0x00C8",
            "Example": "int object.decoratorListCount"
        },
        "loadsCollisions": {
            "Description": "0x00C4",
            "Example": "bool object.loadsCollisions"
        },
        "retained": {
            "Description": "0x00C5",
            "Example": "bool object.retained"
        }
    },
    "CEntity": {
        "FromAddress": {
            "Example": "CEntity CEntity.FromAddress(int address)"
        },
        "GetAddress": {
            "Example": "int object:GetAddress()"
        },
        "GetAttachmentExtension": {
            "Description": "Check if the extension is not nil before using it.",
            "Example": "fwAttachmentEntityExtension object:GetAttachmentExtension()"
        },
        "GetType": {
            "Example": "eEntityType object:GetType()"
        },
        "GetVelocity": {
            "Description": "Returns the current velocity vector in meters per second.",
            "Example": "V3 object:GetVelocity()"
        },
        "HeightMultiplier": {
            "Example": "number object.HeightMultiplier"
        },
        "IsDynamic": {
            "Example": "bool object.IsDynamic"
        },
        "IsFixed": {
            "Example": "bool object.IsFixed"
        },
        "IsFixedByNetwork": {
            "Example": "bool object.IsFixedByNetwork"
        },
        "IsObject": {
            "Example": "bool object:IsObject()"
        },
        "IsPed": {
            "Example": "bool object:IsPed()"
        },
        "IsPhysical": {
            "Example": "bool object:IsPhysical()"
        },
        "IsVehicle": {
            "Example": "bool object:IsVehicle()"
        },
        "IsVisible": {
            "Example": "bool object.IsVisible"
        },
        "ModelInfo": {
            "Description": "Check if 'object.ModelInfo' is not nil before using it.",
            "Example": "CBaseModelInfo object.ModelInfo"
        },
        "Position": {
            "Example": "V3 object.Position"
        },
        "ThicknessMultiplier": {
            "Example": "number object.ThicknessMultiplier"
        },
        "WidthMultiplier": {
            "Example": "number object.WidthMultiplier"
        }
    },
    "CEntityScriptGameStateDataNode": {
        "disableCollisionCompletely": {
            "Example": "bool object.disableCollisionCompletely"
        },
        "isFixed": {
            "Description": "gamestate flag indicating whether the object is using fixed physics",
            "Example": "bool object.isFixed"
        },
        "usesCollision": {
            "Description": "gamestate flag indicating whether the object is using collision",
            "Example": "bool object.usesCollision"
        }
    },
    "CHeliControlDataNode": {
        "BVTHControlVertVel": {
            "Description": "CTaskBringVehicleToHalt bControlVerticalVelocity",
            "Example": "bool object.BVTHControlVertVel"
        },
        "BVTHStoppingDist": {
            "Description": "CTaskBringVehicleToHalt stopping dist",
            "Example": "number object.BVTHStoppingDist"
        },
        "HasTargetGravityScale": {
            "Description": "For hover vehicles",
            "Example": "bool object.HasTargetGravityScale"
        },
        "HasTopSpeedPercentage": {
            "Example": "bool object.HasTopSpeedPercentage"
        },
        "StickY": {
            "Example": "number object.StickY"
        },
        "SubCarDive": {
            "Description": "the current value of the dive control for sub cars",
            "Example": "number object.SubCarDive"
        },
        "SubCarPitch": {
            "Description": "the current value of the pitch control for sub cars",
            "Example": "number object.SubCarPitch"
        },
        "TargetGravityScale": {
            "Example": "number object.TargetGravityScale"
        },
        "bAllLowriderHydraulicsRaised": {
            "Description": "CTaskVehiclePlayerDriveAutomobile::ProcessDriverInputsForPlayerOnUpdate; player has raised all lowrider suspension",
            "Example": "bool object.bAllLowriderHydraulicsRaised"
        },
        "bHasLandingGear": {
            "Description": "if the helicopter has landing gear",
            "Example": "bool object.bHasLandingGear"
        },
        "bIsClosingAnyDoor": {
            "Example": "bool object.bIsClosingAnyDoor"
        },
        "bIsNitrousOverrideActive": {
            "Example": "bool object.bIsNitrousOverrideActive"
        },
        "bModifiedLowriderSuspension": {
            "Description": "CTaskVehiclePlayerDriveAutomobile::ProcessDriverInputsForPlayerOnUpdate; player has modified suspension of lowrider",
            "Example": "bool object.bModifiedLowriderSuspension"
        },
        "bNitrousActive": {
            "Example": "bool object.bNitrousActive"
        },
        "bPlayHydraulicsActivationSound": {
            "Description": "Hydraulics sound effect when activated",
            "Example": "bool object.bPlayHydraulicsActivationSound"
        },
        "bPlayHydraulicsBounceSound": {
            "Description": "Hydraulics sound effect when bouncing",
            "Example": "bool object.bPlayHydraulicsBounceSound"
        },
        "bPlayHydraulicsDeactivationSound": {
            "Description": "Hydraulics sound effect when de-activated",
            "Example": "bool object.bPlayHydraulicsDeactivationSound"
        },
        "brakePedal": {
            "Description": "the current value of the brake pedal",
            "Example": "number object.brakePedal"
        },
        "bringVehicleToHalt": {
            "Description": "CTaskBringVehicleToHalt is running as a secondary task",
            "Example": "bool object.bringVehicleToHalt"
        },
        "fLowriderSuspension": {
            "Description": "Syncs modified lowrider suspension values",
            "Example": "table<int, number> object.fLowriderSuspension"
        },
        "hasActiveAITask": {
            "Description": "should the heli be fixed if no collision around it?",
            "Example": "bool object.hasActiveAITask"
        },
        "hasJetpackStrafeForceScale": {
            "Description": "does the heli have the jetpack effect",
            "Example": "bool object.hasJetpackStrafeForceScale"
        },
        "isInBurnout": {
            "Example": "bool object.isInBurnout"
        },
        "isSubCar": {
            "Example": "bool object.isSubCar"
        },
        "jetPackStrafeForceScale": {
            "Description": "force of jetpack strafe",
            "Example": "number object.jetPackStrafeForceScale"
        },
        "jetPackThrusterThrottle": {
            "Description": "force of jetpack thrusters",
            "Example": "number object.jetPackThrusterThrottle"
        },
        "kersActive": {
            "Description": "indicates if the kers system is active",
            "Example": "bool object.kersActive"
        },
        "landingGearState": {
            "Description": "landing gear state - if the helicopter has landing gear",
            "Example": "int object.landingGearState"
        },
        "lockedToXY": {
            "Description": "anchor state for anchorable sea helis",
            "Example": "bool object.lockedToXY"
        },
        "mainRotorStopped": {
            "Description": "is the main rotor stopped?",
            "Example": "bool object.mainRotorStopped"
        },
        "numWheels": {
            "Description": "number of wheels on this car",
            "Example": "int object.numWheels"
        },
        "pitchControl": {
            "Description": "pitch control of the helicopter",
            "Example": "number object.pitchControl"
        },
        "reducedSuspensionForce": {
            "Description": "reduced suspension force used to \"stance\" tuner pack vehicles",
            "Example": "bool object.reducedSuspensionForce"
        },
        "roadNodeAddress": {
            "Description": "the current road node the vehicle is driving from",
            "Example": "int object.roadNodeAddress"
        },
        "rollControl": {
            "Description": "roll control of the helicopter",
            "Example": "number object.rollControl"
        },
        "subCarYaw": {
            "Description": "the current value of the yaw control for sub cars",
            "Example": "number object.subCarYaw"
        },
        "throttle": {
            "Description": "the current value of the throttle",
            "Example": "number object.throttle"
        },
        "throttleControl": {
            "Description": "throttle control of the helicopter",
            "Example": "number object.throttleControl"
        },
        "topSpeedPercent": {
            "Description": "set to the maximum speed a vehicle can travel at",
            "Example": "number object.topSpeedPercent"
        },
        "yawControl": {
            "Description": "yaw control of the helicopter",
            "Example": "number object.yawControl"
        }
    },
    "CNetGamePlayer": {
        "CxnId": {
            "Description": "Connection Id",
            "Example": "int object.CxnId"
        },
        "GetGamerInfo": {
            "Description": "Returns a structure 'GamerInfo' holding information about the player.",
            "Example": "GamerInfo object:GetGamerInfo()"
        },
        "GetName": {
            "Example": "string object:GetName()"
        },
        "IsLocalPlayer": {
            "Description": "Check whether its the local player or not.",
            "Example": "bool object:IsLocalPlayer()"
        },
        "IsReportBitSet": {
            "Description": "Check if a report flag is set. Also called Rockstar Anti Cheat(RAC).",
            "Example": "bool object:isReportBitSet(eReportReason reason)"
        },
        "PlayerId": {
            "Description": "Player Id",
            "Example": "int object.PlayerId"
        },
        "PlayerInfo": {
            "Description": "Returns a class 'CPlayerInfo' holding information about the player.",
            "Example": "CPlayerInfo object.PlayerInfo"
        }
    },
    "CNetObject": {
        "GetEntity": {
            "Description": "Check if 'object.Entity' is not nil before using it. Invalid for NetObjDoor.",
            "Example": "CPhysical object.Entity"
        },
        "IsRemote": {
            "Example": "bool object.IsRemote"
        },
        "ObjectID": {
            "Description": "Used to identify or to find a netobject.",
            "Example": "int object.ObjectID"
        },
        "ObjectType": {
            "Example": "int object.ObjectType"
        },
        "PendingPlayerId": {
            "Description": "The next owner of the CNetObject.",
            "Example": "int object.PendingPlayerId"
        },
        "PlayerId": {
            "Example": "int object.PlayerId"
        }
    },
    "CObject": {
        "DisableInvincible": {
            "Example": "void object:DisableInvincible()"
        },
        "EnableInvincible": {
            "Example": "void object:EnableInvincible()"
        },
        "FromAddress": {
            "Example": "CObject CObject.FromAddress(int address)"
        },
        "GetAddress": {
            "Example": "int object:GetAddress()"
        },
        "GetAttachmentExtension": {
            "Description": "Check if the extension is not nil before using it.",
            "Example": "fwAttachmentEntityExtension object:GetAttachmentExtension()"
        },
        "GetType": {
            "Example": "eEntityType object:GetType()"
        },
        "GetVelocity": {
            "Description": "Returns the current velocity vector in meters per second.",
            "Example": "V3 object:GetVelocity()"
        },
        "HeightMultiplier": {
            "Example": "number object.HeightMultiplier"
        },
        "IsDynamic": {
            "Example": "bool object.IsDynamic"
        },
        "IsFixed": {
            "Example": "bool object.IsFixed"
        },
        "IsFixedByNetwork": {
            "Example": "bool object.IsFixedByNetwork"
        },
        "IsInWater": {
            "Example": "bool object.IsInWater"
        },
        "IsInvincible": {
            "Example": "bool object:IsInvincible()"
        },
        "IsNotBuoyant": {
            "Example": "bool object.IsNotBuoyant"
        },
        "IsObject": {
            "Example": "bool object:IsObject()"
        },
        "IsPed": {
            "Example": "bool object:IsPed()"
        },
        "IsPhysical": {
            "Example": "bool object:IsPhysical()"
        },
        "IsRenderScorched": {
            "Example": "bool object.IsRenderScorched"
        },
        "IsVehicle": {
            "Example": "bool object:IsVehicle()"
        },
        "IsVisible": {
            "Example": "bool object.IsVisible"
        },
        "ModelInfo": {
            "Description": "Check if 'object.ModelInfo' is not nil before using it.",
            "Example": "CBaseModelInfo object.ModelInfo"
        },
        "NetObject": {
            "Description": "Check if 'object.NetObject' is not nil before using it.",
            "Example": "CNetObject object.NetObject"
        },
        "Position": {
            "Example": "V3 object.Position"
        },
        "ThicknessMultiplier": {
            "Example": "number object.ThicknessMultiplier"
        },
        "WidthMultiplier": {
            "Example": "number object.WidthMultiplier"
        }
    },
    "CObjectCreationDataNode": {
        "CanBlendWhenFixed": {
            "Description": "indicates the network blender can run when the object is using fixed physics",
            "Example": "bool object.CanBlendWhenFixed"
        },
        "DestroyFrags": {
            "Description": "if the object is breakable, destroy any frags created by the breaking",
            "Example": "bool object.DestroyFrags"
        },
        "HasExploded": {
            "Description": "the object has exploded",
            "Example": "bool object.HasExploded"
        },
        "IsAmbientFence": {
            "Description": "the object is an uprooted fence",
            "Example": "bool object.IsAmbientFence"
        },
        "IsBroken": {
            "Description": "the object is broken / damaged",
            "Example": "bool object.IsBroken"
        },
        "IsFragObject": {
            "Description": "this object is a frag object",
            "Example": "bool object.IsFragObject"
        },
        "KeepRegistered": {
            "Description": "the object must remain registered",
            "Example": "bool object.KeepRegistered"
        },
        "ScriptGrabPosition": {
            "Description": "world position script grabbed this object from",
            "Example": "V3 object.ScriptGrabPosition"
        },
        "ScriptGrabRadius": {
            "Description": "radius used by script to grab this object",
            "Example": "number object.ScriptGrabRadius"
        },
        "ScriptGrabbedFromWorld": {
            "Description": "has script grabbed this object from a world position?",
            "Example": "bool object.ScriptGrabbedFromWorld"
        },
        "dummyPosition": {
            "Description": "position of the dummy object this object was instanced from",
            "Example": "V3 object.dummyPosition"
        },
        "fragGroupIndex": {
            "Description": "the frag group index (used by fragment cache objects)",
            "Example": "int object.fragGroupIndex"
        },
        "fragParentVehicle": {
            "Description": "if set, this object is a vehicle fragment and it belongs to this vehicle id",
            "Example": "int object.fragParentVehicle"
        },
        "hasGameObject": {
            "Description": "is there a prop object associated with this network object?",
            "Example": "bool object.hasGameObject"
        },
        "hasInitPhysics": {
            "Description": "has this object initialized physics?",
            "Example": "bool object.hasInitPhysics"
        },
        "lodDistance": {
            "Example": "int object.lodDistance"
        },
        "lodOrphanHd": {
            "Example": "bool object.lodOrphanHd"
        },
        "modelHash": {
            "Description": "model index",
            "Example": "int object.modelHash"
        },
        "noReassign": {
            "Description": "stop the object changing owner",
            "Example": "bool object.noReassign"
        },
        "objectMatrix": {
            "Description": "the position of the object (used when the network object has no game object)",
            "Example": "table<int, V3> object.objectMatrix"
        },
        "objectPosition": {
            "Description": "position of the object (used when there is no game object)",
            "Example": "V3 object.objectPosition"
        },
        "ownedBy": {
            "Description": "created by",
            "Example": "int object.ownedBy"
        },
        "ownershipToken": {
            "Description": "used when there is no associated prop (and sync data) for this network object",
            "Example": "int object.ownershipToken"
        },
        "playerWantsControl": {
            "Description": "does the creating player want control of this object",
            "Example": "bool object.playerWantsControl"
        }
    },
    "CObjectGameStateDataNode": {
        "HasBeenPickedUpByHook": {
            "Example": "bool object.HasBeenPickedUpByHook"
        },
        "brokenFlags": {
            "Example": "int object.brokenFlags"
        },
        "hasAddedPhysics": {
            "Example": "bool object.hasAddedPhysics"
        },
        "objectHasExploded": {
            "Example": "bool object.objectHasExploded"
        },
        "popTires": {
            "Example": "bool object.popTires"
        },
        "taskDataSize": {
            "Example": "int object.taskDataSize"
        },
        "taskSpecificData": {
            "Example": "table<int, int> object.taskSpecificData"
        },
        "taskType": {
            "Example": "int object.taskType"
        },
        "visible": {
            "Example": "bool object.visible"
        }
    },
    "CObjectSectorPosNode": {
        "SectorPosX": {
            "Description": "X position of this object within the current sector",
            "Example": "number object.SectorPosX"
        },
        "SectorPosY": {
            "Description": "Y position of this object within the current sector",
            "Example": "number object.SectorPosY"
        },
        "SectorPosZ": {
            "Description": "Z position of this object within the current sector",
            "Example": "number object.SectorPosZ"
        },
        "UseHighPrecision": {
            "Description": "Indicates whether the position should be synced with high precision",
            "Example": "bool object.UseHighPrecision"
        }
    },
    "CPed": {
        "Armor": {
            "Example": "number object.Armor"
        },
        "CurVehicle": {
            "Example": "CVehicle object.CurVehicle"
        },
        "DisableInvincible": {
            "Example": "void object:DisableInvincible()"
        },
        "EnableInvincible": {
            "Example": "void object:EnableInvincible()"
        },
        "FromAddress": {
            "Example": "CPed CPed.FromAddress(int address)"
        },
        "GetAddress": {
            "Example": "int object:GetAddress()"
        },
        "GetAttachmentExtension": {
            "Description": "Check if the extension is not nil before using it.",
            "Example": "fwAttachmentEntityExtension object:GetAttachmentExtension()"
        },
        "GetType": {
            "Example": "eEntityType object:GetType()"
        },
        "GetVelocity": {
            "Description": "Returns the current velocity vector in meters per second.",
            "Example": "V3 object:GetVelocity()"
        },
        "Health": {
            "Example": "number object.Health"
        },
        "HeightMultiplier": {
            "Example": "number object.HeightMultiplier"
        },
        "IsDynamic": {
            "Example": "bool object.IsDynamic"
        },
        "IsFixed": {
            "Example": "bool object.IsFixed"
        },
        "IsFixedByNetwork": {
            "Example": "bool object.IsFixedByNetwork"
        },
        "IsInVehicle": {
            "Example": "bool object:IsInVehicle()"
        },
        "IsInWater": {
            "Example": "bool object.IsInWater"
        },
        "IsInvincible": {
            "Example": "bool object:IsInvincible()"
        },
        "IsNotBuoyant": {
            "Example": "bool object.IsNotBuoyant"
        },
        "IsObject": {
            "Example": "bool object:IsObject()"
        },
        "IsPed": {
            "Example": "bool object:IsPed()"
        },
        "IsPhysical": {
            "Example": "bool object:IsPhysical()"
        },
        "IsPlayer": {
            "Example": "bool object:IsPlayer()"
        },
        "IsRenderScorched": {
            "Example": "bool object.IsRenderScorched"
        },
        "IsVehicle": {
            "Example": "bool object:IsVehicle()"
        },
        "IsVisible": {
            "Example": "bool object.IsVisible"
        },
        "LastVehicle": {
            "Example": "CVehicle object.LastVehicle"
        },
        "MaxHealth": {
            "Example": "number object.MaxHealth"
        },
        "ModelInfo": {
            "Description": "Check if 'object.ModelInfo' is not nil before using it.",
            "Example": "CBaseModelInfo object.ModelInfo"
        },
        "NetObject": {
            "Description": "Check if 'object.NetObject' is not nil before using it.",
            "Example": "CNetObject object.NetObject"
        },
        "PlayerInfo": {
            "Example": "CPlayerInfo object.PlayerInfo"
        },
        "Position": {
            "Example": "V3 object.Position"
        },
        "ThicknessMultiplier": {
            "Example": "number object.ThicknessMultiplier"
        },
        "WidthMultiplier": {
            "Example": "number object.WidthMultiplier"
        }
    },
    "CPedAppearanceDataNode": {
        "PhoneMode": {
            "Description": "for secondary task phone",
            "Example": "int object.PhoneMode"
        },
        "facialClipSetId": {
            "Description": "the facial clipset used by the ped",
            "Example": "int object.facialClipSetId"
        },
        "facialIdleAnimOverrideClipDictNameHash": {
            "Description": "the dictionary used by the ped",
            "Example": "int object.facialIdleAnimOverrideClipDictNameHash"
        },
        "facialIdleAnimOverrideClipNameHash": {
            "Description": "the facial clip used by the ped",
            "Example": "int object.facialIdleAnimOverrideClipNameHash"
        },
        "helmetProp": {
            "Description": "what helmet type are we using?",
            "Example": "int object.helmetProp"
        },
        "helmetTextureId": {
            "Description": "what texture are we going to use for the helmet?",
            "Example": "int object.helmetTextureId"
        },
        "isAttachingHelmet": {
            "Description": "are we attaching a helmet?",
            "Example": "bool object.isAttachingHelmet"
        },
        "isRemovingHelmet": {
            "Description": "are we removing a helmet?",
            "Example": "bool object.isRemovingHelmet"
        },
        "isVisorSwitching": {
            "Example": "bool object.isVisorSwitching"
        },
        "isWearingHelmet": {
            "Description": "are we wearing a helmet?",
            "Example": "bool object.isWearingHelmet"
        },
        "parachutePackTintIndex": {
            "Description": "what colour the parachute pack will appear on deployment...",
            "Example": "int object.parachutePackTintIndex"
        },
        "parachuteTintIndex": {
            "Description": "what colour the parachute will appear on deployment...",
            "Example": "int object.parachuteTintIndex"
        },
        "supportsVisor": {
            "Example": "bool object.supportsVisor"
        },
        "targetVisorState": {
            "Example": "int object.targetVisorState"
        },
        "visorDownProp": {
            "Description": "what helmet type are we using?",
            "Example": "int object.visorDownProp"
        },
        "visorIsUp": {
            "Example": "bool object.visorIsUp"
        },
        "visorUpProp": {
            "Description": "what helmet type are we using?",
            "Example": "int object.visorUpProp"
        }
    },
    "CPedAttachDataNode": {
        "attachBone": {
            "Description": "bone ped is attached to",
            "Example": "int object.attachBone"
        },
        "attachFlags": {
            "Description": "attachment flags",
            "Example": "int object.attachFlags"
        },
        "attachHeading": {
            "Description": "attachment heading",
            "Example": "number object.attachHeading"
        },
        "attachHeadingLimit": {
            "Description": "attachment heading limit",
            "Example": "number object.attachHeadingLimit"
        },
        "attachOffset": {
            "Description": "offset from attachment position",
            "Example": "V3 object.attachOffset"
        },
        "attachQuat": {
            "Description": "attachment quaternion",
            "Example": "V3 object.attachQuat"
        },
        "attached": {
            "Description": "is the ped attached?",
            "Example": "bool object.attached"
        },
        "attachedObjectID": {
            "Description": "ID of Object ped is attached to",
            "Example": "int object.attachedObjectID"
        },
        "attachedToGround": {
            "Description": "whether the ped is attached to ground or not",
            "Example": "bool object.attachedToGround"
        }
    },
    "CPedCreationDataNode": {
        "IsRespawnObjId": {
            "Description": "is a valid respawn object id",
            "Example": "bool object.IsRespawnObjId"
        },
        "RespawnFlaggedForRemoval": {
            "Description": "True if the respawn ped was flagged for removal",
            "Example": "bool object.RespawnFlaggedForRemoval"
        },
        "attDamageToPlayer": {
            "Description": "ID of the Player to attribute damage to.",
            "Example": "int object.attDamageToPlayer"
        },
        "hasAttDamageToPlayer": {
            "Description": "True if the ped damage should be attributed to a certain player.",
            "Example": "bool object.hasAttDamageToPlayer"
        },
        "hasProp": {
            "Description": "does this ped carry a prop",
            "Example": "bool object.hasProp"
        },
        "inVehicle": {
            "Description": "is this ped in a vehicle?",
            "Example": "bool object.inVehicle"
        },
        "isStanding": {
            "Description": "is this ped standing?",
            "Example": "bool object.isStanding"
        },
        "maxHealth": {
            "Description": "max health as it can be altered",
            "Example": "int object.maxHealth"
        },
        "modelHash": {
            "Description": "model index",
            "Example": "int object.modelHash"
        },
        "popType": {
            "Description": "population type",
            "Example": "int object.popType"
        },
        "propHash": {
            "Description": "index of the prop the ped is carrying",
            "Example": "int object.propHash"
        },
        "randomSeed": {
            "Description": "random seed",
            "Example": "int object.randomSeed"
        },
        "seat": {
            "Description": "seat the ped is sitting in in the vehicle",
            "Example": "int object.seat"
        },
        "vehicleID": {
            "Description": "ID of the vehicle this ped is currently in",
            "Example": "int object.vehicleID"
        },
        "voiceHash": {
            "Description": "voice hash code",
            "Example": "int object.voiceHash"
        },
        "wearingAHelmet": {
            "Description": "is the ped wearing a helmet *put on via CPedHelmetComponent*",
            "Example": "bool object.wearingAHelmet"
        }
    },
    "CPedGameStateDataNode": {
        "HasValidWeaponClipset": {
            "Description": "do we have a valid weapon clip set? Used as part of a hack fix for when pointing while holding a weapon",
            "Example": "bool object.HasValidWeaponClipset"
        },
        "LookAtFlags": {
            "Description": "eHeadIkFlags",
            "Example": "int object.LookAtFlags"
        },
        "LookAtObjectID": {
            "Description": "If looking at an object, ID of object ped is looking at",
            "Example": "int object.LookAtObjectID"
        },
        "arrestState": {
            "Description": "ped arrest state",
            "Example": "int object.arrestState"
        },
        "bActionModeEnabled": {
            "Example": "bool object.bActionModeEnabled"
        },
        "bDisableStartEngine": {
            "Example": "bool object.bDisableStartEngine"
        },
        "bPedPerceptionModified": {
            "Example": "bool object.bPedPerceptionModified"
        },
        "bStealthModeEnabled": {
            "Example": "bool object.bStealthModeEnabled"
        },
        "bvehicleweaponindex": {
            "Example": "bool object.bvehicleweaponindex"
        },
        "canBeIncapacitated": {
            "Example": "bool object.canBeIncapacitated"
        },
        "changeToAmbientPopTypeOnMigration": {
            "Example": "bool object.changeToAmbientPopTypeOnMigration"
        },
        "cleardamagecount": {
            "Example": "int object.cleardamagecount"
        },
        "createdByConcealedPlayer": {
            "Example": "bool object.createdByConcealedPlayer"
        },
        "custodianID": {
            "Description": "ID of the player that is and has taken us into custody.",
            "Example": "int object.custodianID"
        },
        "deathState": {
            "Description": "ped death state",
            "Example": "int object.deathState"
        },
        "disableBlindFiringInShotReactions": {
            "Example": "bool object.disableBlindFiringInShotReactions"
        },
        "doingWeaponSwap": {
            "Description": "The ped is running a CTaskSwapWeapon",
            "Example": "bool object.doingWeaponSwap"
        },
        "dontActivateRagdollFromAnyPedImpact": {
            "Example": "bool object.dontActivateRagdollFromAnyPedImpact"
        },
        "dontBehaveLikeLaw": {
            "Example": "bool object.dontBehaveLikeLaw"
        },
        "equippedGadgets": {
            "Description": "hashes of gadgets equipped",
            "Example": "table<int, int> object.equippedGadgets"
        },
        "flashLightOn": {
            "Example": "bool object.flashLightOn"
        },
        "hasCustodianOrArrestFlags": {
            "Description": "does this ped have a custodian.",
            "Example": "bool object.hasCustodianOrArrestFlags"
        },
        "hasDroppedWeapon": {
            "Example": "bool object.hasDroppedWeapon"
        },
        "hasVehicle": {
            "Description": "does this ped have a vehicle?",
            "Example": "bool object.hasVehicle"
        },
        "hitByTranqWeapon": {
            "Example": "bool object.hitByTranqWeapon"
        },
        "inVehicle": {
            "Description": "is this ped in a vehicle?",
            "Example": "bool object.inVehicle"
        },
        "isDuckingInVehicle": {
            "Example": "bool object.isDuckingInVehicle"
        },
        "isLookingAtObject": {
            "Description": "Is looking at an object",
            "Example": "bool object.isLookingAtObject"
        },
        "isUpright": {
            "Example": "bool object.isUpright"
        },
        "isUsingAlternateLowriderLeanAnims": {
            "Example": "bool object.isUsingAlternateLowriderLeanAnims"
        },
        "isUsingLowriderLeanAnims": {
            "Example": "bool object.isUsingLowriderLeanAnims"
        },
        "keepTasksAfterCleanup": {
            "Description": "ped keeps his tasks given when he was a script ped",
            "Example": "bool object.keepTasksAfterCleanup"
        },
        "killedByKnockdown": {
            "Example": "bool object.killedByKnockdown"
        },
        "killedByStandardMelee": {
            "Example": "bool object.killedByStandardMelee"
        },
        "killedByStealth": {
            "Example": "bool object.killedByStealth"
        },
        "killedByTakedown": {
            "Example": "bool object.killedByTakedown"
        },
        "mountID": {
            "Description": "ID of the mount this ped is currently in",
            "Example": "int object.mountID"
        },
        "nMovementModeOverrideID": {
            "Example": "int object.nMovementModeOverrideID"
        },
        "numGadgets": {
            "Description": "the number of currently equipped gadgets",
            "Example": "int object.numGadgets"
        },
        "numWeaponComponents": {
            "Description": "the number of weapon components on current equipped weapon",
            "Example": "int object.numWeaponComponents"
        },
        "onMount": {
            "Description": "is this ped on a mount?",
            "Example": "bool object.onMount"
        },
        "permanentlyDisablePotentialToBeWalkedIntoResponse": {
            "Example": "bool object.permanentlyDisablePotentialToBeWalkedIntoResponse"
        },
        "seat": {
            "Description": "seat the ped is sitting in in the vehicle",
            "Example": "int object.seat"
        },
        "vehicleID": {
            "Description": "ID of the vehicle this ped is currently in",
            "Example": "int object.vehicleID"
        },
        "vehicleweaponindex": {
            "Example": "int object.vehicleweaponindex"
        },
        "weapon": {
            "Description": "currently selected weapon type",
            "Example": "int object.weapon"
        },
        "weaponComponents": {
            "Description": "hashes of weapon components equipped",
            "Example": "table<int, int> object.weaponComponents"
        },
        "weaponComponentsTint": {
            "Example": "table<int, int> object.weaponComponentsTint"
        },
        "weaponObjectAttachLeft": {
            "Example": "bool object.weaponObjectAttachLeft"
        },
        "weaponObjectExists": {
            "Description": "is there a weapon object",
            "Example": "bool object.weaponObjectExists"
        },
        "weaponObjectHasAmmo": {
            "Example": "bool object.weaponObjectHasAmmo"
        },
        "weaponObjectTintIndex": {
            "Description": "weapon object tint index (coloured weapons)",
            "Example": "int object.weaponObjectTintIndex"
        },
        "weaponObjectVisible": {
            "Description": "is the weapon object visible",
            "Example": "bool object.weaponObjectVisible"
        }
    },
    "CPedInventoryDataNode": {
        "allAmmoInfinite": {
            "Example": "bool object.allAmmoInfinite"
        },
        "ammoInfinite": {
            "Example": "table<int, bool> object.ammoInfinite"
        },
        "ammoQuantity": {
            "Example": "table<int, int> object.ammoQuantity"
        },
        "ammoSlots": {
            "Example": "table<int, int> object.ammoSlots"
        },
        "itemSlotNumComponents": {
            "Example": "table<int, int> object.itemSlotNumComponents"
        },
        "itemSlotTint": {
            "Example": "table<int, int> object.itemSlotTint"
        },
        "itemSlots": {
            "Example": "table<int, int> object.itemSlots"
        },
        "numAmmos": {
            "Example": "int object.numAmmos"
        },
        "numItems": {
            "Example": "int object.numItems"
        }
    },
    "CPedMovementDataNode": {
        "DesiredMoveBlendRatioX": {
            "Description": "desired move blend ratio in the X axis",
            "Example": "number object.DesiredMoveBlendRatioX"
        },
        "DesiredMoveBlendRatioY": {
            "Description": "desired move blend ratio in the Y axis",
            "Example": "number object.DesiredMoveBlendRatioY"
        },
        "DesiredPitch": {
            "Description": "desired pitch",
            "Example": "number object.DesiredPitch"
        },
        "HasDesiredMoveBlendRatioX": {
            "Description": "indicates whether the move blend ratio for the ped in the X axis is non-zero",
            "Example": "bool object.HasDesiredMoveBlendRatioX"
        },
        "HasDesiredMoveBlendRatioY": {
            "Description": "indicates whether the move blend ratio for the ped in the Y axis is non-zero",
            "Example": "bool object.HasDesiredMoveBlendRatioY"
        },
        "HasStopped": {
            "Description": "indicates the ped has stopped moving (velocity is zero)",
            "Example": "bool object.HasStopped"
        },
        "MaxMoveBlendRatio": {
            "Description": "script set max move blend ratio",
            "Example": "number object.MaxMoveBlendRatio"
        }
    },
    "CPedOrientationDataNode": {
        "currentHeading": {
            "Description": "ped current heading",
            "Example": "number object.currentHeading"
        },
        "desiredHeading": {
            "Description": "ped desired heading",
            "Example": "number object.desiredHeading"
        }
    },
    "CPedScriptCreationDataNode": {
        "StayInCarWhenJacked": {
            "Example": "bool object.StayInCarWhenJacked"
        }
    },
    "CPedScriptGameStateDataNode": {
        "AngledDefensiveAreaV1": {
            "Example": "V3 object.AngledDefensiveAreaV1"
        },
        "AngledDefensiveAreaV2": {
            "Example": "V3 object.AngledDefensiveAreaV2"
        },
        "AngledDefensiveAreaWidth": {
            "Example": "number object.AngledDefensiveAreaWidth"
        },
        "DefensiveAreaCentre": {
            "Example": "V3 object.DefensiveAreaCentre"
        },
        "DefensiveAreaRadius": {
            "Example": "number object.DefensiveAreaRadius"
        },
        "DefensiveAreaType": {
            "Example": "int object.DefensiveAreaType"
        },
        "FiringPatternHash": {
            "Example": "int object.FiringPatternHash"
        },
        "HasDefensiveArea": {
            "Example": "bool object.HasDefensiveArea"
        },
        "HasInVehicleContextHash": {
            "Example": "bool object.HasInVehicleContextHash"
        },
        "NavCapabilityFlags": {
            "Example": "int object.NavCapabilityFlags"
        },
        "SeatIndexToUseInAGroup": {
            "Example": "int object.SeatIndexToUseInAGroup"
        },
        "UseCentreAsGotoPos": {
            "Example": "bool object.UseCentreAsGotoPos"
        },
        "ammoToDrop": {
            "Example": "int object.ammoToDrop"
        },
        "combatMovement": {
            "Example": "int object.combatMovement"
        },
        "fAccuracy": {
            "Example": "number object.fAccuracy"
        },
        "fBlindFireChance": {
            "Example": "number object.fBlindFireChance"
        },
        "fBurstDurationInCover": {
            "Example": "number object.fBurstDurationInCover"
        },
        "fHomingRocketBreakLockAngle": {
            "Example": "number object.fHomingRocketBreakLockAngle"
        },
        "fHomingRocketBreakLockAngleClose": {
            "Example": "number object.fHomingRocketBreakLockAngleClose"
        },
        "fHomingRocketBreakLockCloseDistance": {
            "Example": "number object.fHomingRocketBreakLockCloseDistance"
        },
        "fMaxInformFriendDistance": {
            "Example": "number object.fMaxInformFriendDistance"
        },
        "fMaxShootingDistance": {
            "Example": "number object.fMaxShootingDistance"
        },
        "fMaxVehicleTurretFiringRange": {
            "Example": "number object.fMaxVehicleTurretFiringRange"
        },
        "fStrafeWhenMovingChance": {
            "Example": "number object.fStrafeWhenMovingChance"
        },
        "fTimeBetweenAggressiveMovesDuringVehicleChase": {
            "Example": "number object.fTimeBetweenAggressiveMovesDuringVehicleChase"
        },
        "fTimeBetweenBurstsInCover": {
            "Example": "number object.fTimeBetweenBurstsInCover"
        },
        "fTimeBetweenPeeks": {
            "Example": "number object.fTimeBetweenPeeks"
        },
        "fWeaponDamageModifier": {
            "Example": "number object.fWeaponDamageModifier"
        },
        "fleeBehaviorFlags": {
            "Example": "int object.fleeBehaviorFlags"
        },
        "hasPedType": {
            "Example": "bool object.hasPedType"
        },
        "inVehicleContextHash": {
            "Example": "int object.inVehicleContextHash"
        },
        "isAmbientSpeechDisabled": {
            "Example": "bool object.isAmbientSpeechDisabled"
        },
        "isPainAudioDisabled": {
            "Example": "bool object.isPainAudioDisabled"
        },
        "isTargettableByTeam": {
            "Example": "int object.isTargettableByTeam"
        },
        "minOnGroundTimeForStun": {
            "Example": "int object.minOnGroundTimeForStun"
        },
        "pedCash": {
            "Example": "int object.pedCash"
        },
        "pedHasCash": {
            "Example": "bool object.pedHasCash"
        },
        "pedType": {
            "Example": "int object.pedType"
        },
        "popType": {
            "Example": "int object.popType"
        },
        "ragdollBlockingFlags": {
            "Example": "int object.ragdollBlockingFlags"
        },
        "shootRate": {
            "Example": "number object.shootRate"
        },
        "targetLossResponse": {
            "Example": "int object.targetLossResponse"
        },
        "uMaxNumFriendsToInform": {
            "Example": "int object.uMaxNumFriendsToInform"
        },
        "vehicleweaponindex": {
            "Example": "int object.vehicleweaponindex"
        }
    },
    "CPedSectorPosMapNode": {
        "IsRagdolling": {
            "Example": "bool object.IsRagdolling"
        },
        "IsStandingOnNetworkObject": {
            "Example": "bool object.IsStandingOnNetworkObject"
        },
        "LocalOffset": {
            "Example": "V3 object.LocalOffset"
        },
        "StandingOnNetworkObjectID": {
            "Example": "int object.StandingOnNetworkObjectID"
        }
    },
    "CPedTaskSequenceDataNode": {
        "hasSequence": {
            "Example": "bool object.hasSequence"
        },
        "numTasks": {
            "Example": "int object.numTasks"
        },
        "repeatMode": {
            "Example": "int object.repeatMode"
        },
        "sequenceResourceId": {
            "Example": "int object.sequenceResourceId"
        },
        "taskData": {
            "Example": "table<int, CTaskData> object.taskData"
        }
    },
    "CPedTaskSpecificDataNode": {
        "taskData": {
            "Example": "CTaskData object.taskData"
        },
        "taskIndex": {
            "Example": "int object.taskIndex"
        }
    },
    "CPedTaskTreeDataNode": {
        "scriptCommand": {
            "Example": "int object.scriptCommand"
        },
        "taskSlotsUsed": {
            "Example": "int object.taskSlotsUsed"
        },
        "taskStage": {
            "Example": "int object.taskStage"
        },
        "taskTreeData": {
            "Example": "table<int, TaskSlotData> object.taskTreeData"
        }
    },
    "CPhysical": {
        "DisableInvincible": {
            "Example": "void object:DisableInvincible()"
        },
        "EnableInvincible": {
            "Example": "void object:EnableInvincible()"
        },
        "FromAddress": {
            "Example": "CPhysical CPhysical.FromAddress(int address)"
        },
        "GetAddress": {
            "Example": "int object:GetAddress()"
        },
        "GetAttachmentExtension": {
            "Description": "Check if the extension is not nil before using it.",
            "Example": "fwAttachmentEntityExtension object:GetAttachmentExtension()"
        },
        "GetType": {
            "Example": "eEntityType object:GetType()"
        },
        "GetVelocity": {
            "Description": "Returns the current velocity vector in meters per second.",
            "Example": "V3 object:GetVelocity()"
        },
        "HeightMultiplier": {
            "Example": "number object.HeightMultiplier"
        },
        "IsDynamic": {
            "Example": "bool object.IsDynamic"
        },
        "IsFixed": {
            "Example": "bool object.IsFixed"
        },
        "IsFixedByNetwork": {
            "Example": "bool object.IsFixedByNetwork"
        },
        "IsInWater": {
            "Example": "bool object.IsInWater"
        },
        "IsInvincible": {
            "Example": "bool object:IsInvincible()"
        },
        "IsNotBuoyant": {
            "Example": "bool object.IsNotBuoyant"
        },
        "IsObject": {
            "Example": "bool object:IsObject()"
        },
        "IsPed": {
            "Example": "bool object:IsPed()"
        },
        "IsPhysical": {
            "Example": "bool object:IsPhysical()"
        },
        "IsRenderScorched": {
            "Example": "bool object.IsRenderScorched"
        },
        "IsVehicle": {
            "Example": "bool object:IsVehicle()"
        },
        "IsVisible": {
            "Example": "bool object.IsVisible"
        },
        "ModelInfo": {
            "Description": "Check if 'object.ModelInfo' is not nil before using it.",
            "Example": "CBaseModelInfo object.ModelInfo"
        },
        "NetObject": {
            "Description": "Check if 'object.NetObject' is not nil before using it.",
            "Example": "CNetObject object.NetObject"
        },
        "Position": {
            "Example": "V3 object.Position"
        },
        "ThicknessMultiplier": {
            "Example": "number object.ThicknessMultiplier"
        },
        "WidthMultiplier": {
            "Example": "number object.WidthMultiplier"
        }
    },
    "CPhysicalAttachDataNode": {
        "InvMassScaleA": {
            "Description": "inv mass scale A",
            "Example": "number object.InvMassScaleA"
        },
        "InvMassScaleB": {
            "Description": "inv mass scale B",
            "Example": "number object.InvMassScaleB"
        },
        "IsCargoVehicle": {
            "Description": "is the vehicle attached as a cargo vehicle",
            "Example": "bool object.IsCargoVehicle"
        },
        "activatePhysicsWhenDetached": {
            "Description": "activates the physics on the object when it is detached",
            "Example": "bool object.activatePhysicsWhenDetached"
        },
        "allowInitialSeparation": {
            "Description": "allowed initial separation",
            "Example": "bool object.allowInitialSeparation"
        },
        "attached": {
            "Description": "is this object attached?",
            "Example": "bool object.attached"
        },
        "attachedObjectID": {
            "Description": "object ID of the object attached to",
            "Example": "int object.attachedObjectID"
        },
        "attachmentFlags": {
            "Description": "attachment flags",
            "Example": "int object.attachmentFlags"
        },
        "attachmentMyBone": {
            "Description": "attachment bone",
            "Example": "int object.attachmentMyBone"
        },
        "attachmentOffset": {
            "Description": "attachment offset",
            "Example": "V3 object.attachmentOffset"
        },
        "attachmentOtherBone": {
            "Description": "attachment bone",
            "Example": "int object.attachmentOtherBone"
        },
        "attachmentParentOffset": {
            "Description": "attachment parent offset",
            "Example": "V3 object.attachmentParentOffset"
        },
        "attachmentQuat": {
            "Description": "attachment quaternion",
            "Example": "V3 object.attachmentQuat"
        },
        "syncPhysicsActivation": {
            "Description": "if set m_activatePhysicsWhenDetached is synced",
            "Example": "bool object.syncPhysicsActivation"
        }
    },
    "CPhysicalGameStateDataNode": {
        "allowCloningWhileInTutorial": {
            "Description": "if set, the entity won't be stopped from cloning for players who are not in a tutorial",
            "Example": "bool object.allowCloningWhileInTutorial"
        },
        "alphaType": {
            "Description": "the type of alpha ramp the entity is doing",
            "Example": "int object.alphaType"
        },
        "alteringAlpha": {
            "Description": "the entity is fading out / alpha ramping",
            "Example": "bool object.alteringAlpha"
        },
        "customFadeDuration": {
            "Description": "A custom max duration for fading",
            "Example": "int object.customFadeDuration"
        },
        "fadingOut": {
            "Description": "the entity is fading out",
            "Example": "bool object.fadingOut"
        },
        "isInWater": {
            "Description": "is in water game state flag",
            "Example": "bool object.isInWater"
        },
        "isVisible": {
            "Description": "gamestate flag indicating whether the object is visible",
            "Example": "bool object.isVisible"
        },
        "renderScorched": {
            "Description": "render scorched game state flag",
            "Example": "bool object.renderScorched"
        }
    },
    "CPhysicalMigrationDataNode": {
        "isDead": {
            "Description": "does this object have zero health?",
            "Example": "bool object.isDead"
        }
    },
    "CPickupCreationDataNode": {
        "LODdistance": {
            "Description": "LOD distance of pickup",
            "Example": "int object.LODdistance"
        },
        "PlayersToBlockList": {
            "Description": "List of blocked players for this pickup",
            "Example": "int object.PlayersToBlockList"
        },
        "amount": {
            "Description": "the amount held in the pickup (only used for money pickups currently)",
            "Example": "int object.amount"
        },
        "bHasPlacement": {
            "Description": "set if the network object has a corresponding CPickup object",
            "Example": "bool object.bHasPlacement"
        },
        "bHasPlayersBlockingList": {
            "Description": "Are there any blocked players for this pickup",
            "Example": "bool object.bHasPlayersBlockingList"
        },
        "bPlayerGift": {
            "Description": "set if this is an ambient pickup dropped for another player to collect",
            "Example": "bool object.bPlayerGift"
        },
        "customModelHash": {
            "Description": "a custom model, if specified by script",
            "Example": "int object.customModelHash"
        },
        "includeProjectiles": {
            "Description": "Allow projectiles to collide with this pickup",
            "Example": "bool object.includeProjectiles"
        },
        "lifeTime": {
            "Description": "how long the pickup has existed (only used for ambient pickups)",
            "Example": "int object.lifeTime"
        },
        "numWeaponComponents": {
            "Example": "int object.numWeaponComponents"
        },
        "pickupHash": {
            "Description": "the type of the pickup",
            "Example": "int object.pickupHash"
        },
        "weaponComponents": {
            "Description": "for modded weapons dropped by players",
            "Example": "table<int, int> object.weaponComponents"
        },
        "weaponTintIndex": {
            "Description": "for modded weapons dropped by players",
            "Example": "int object.weaponTintIndex"
        }
    },
    "CPickupPlacementCreationDataNode": {
        "amount": {
            "Description": "a variable amount used by some pickup types (eg money).",
            "Example": "int object.amount"
        },
        "customModelHash": {
            "Description": "a custom model, if specified by script",
            "Example": "int object.customModelHash"
        },
        "customRegenTime": {
            "Description": "a custom regeneration time, if specified by script",
            "Example": "int object.customRegenTime"
        },
        "mapPlacement": {
            "Description": "indicates whether this is a map placement or not",
            "Example": "bool object.mapPlacement"
        },
        "pickupHash": {
            "Description": "the hash of the pickup type",
            "Example": "int object.pickupHash"
        },
        "pickupOrientation": {
            "Description": "the pickup orientation in eulers",
            "Example": "V3 object.pickupOrientation"
        },
        "pickupPosition": {
            "Description": "the pickup position",
            "Example": "V3 object.pickupPosition"
        },
        "placementFlags": {
            "Description": "the placement flags",
            "Example": "int object.placementFlags"
        },
        "teamPermits": {
            "Description": "which teams are allowed to collect this pickup",
            "Example": "int object.teamPermits"
        }
    },
    "CPickupSectorPosNode": {
        "SectorPosX": {
            "Description": "X position of this object within the current sector",
            "Example": "number object.SectorPosX"
        },
        "SectorPosY": {
            "Description": "Y position of this object within the current sector",
            "Example": "number object.SectorPosY"
        },
        "SectorPosZ": {
            "Description": "Z position of this object within the current sector",
            "Example": "number object.SectorPosZ"
        }
    },
    "CPlaneGameStateDataNode": {
        "AIIgnoresBrokenPartsForHandling": {
            "Description": "if AI can fly plane well with damaged parts",
            "Example": "bool object.AIIgnoresBrokenPartsForHandling"
        },
        "AllowRollAndYawWhenCrashing": {
            "Description": "When set, planes will spiral while crashing",
            "Example": "bool object.AllowRollAndYawWhenCrashing"
        },
        "BrokenSections": {
            "Description": "flags indicating which sections have broken off",
            "Example": "int object.BrokenSections"
        },
        "ControlSectionsBreakOffFromExplosions": {
            "Example": "bool object.ControlSectionsBreakOffFromExplosions"
        },
        "DamagedSections": {
            "Description": "flags indicating which sections are damaged",
            "Example": "int object.DamagedSections"
        },
        "EngineDamageScale": {
            "Description": "damage scale for engine (overall)",
            "Example": "number object.EngineDamageScale"
        },
        "HasCustomLandingGearSectionDamageScale": {
            "Description": "Do we have custom damage scales for our landing gear sections?",
            "Example": "bool object.HasCustomLandingGearSectionDamageScale"
        },
        "HasCustomSectionDamageScale": {
            "Description": "Do we have custom damage scales for our sections?",
            "Example": "bool object.HasCustomSectionDamageScale"
        },
        "IndividualPropellerFlags": {
            "Description": "flags indicating state of individual propellers",
            "Example": "int object.IndividualPropellerFlags"
        },
        "LODdistance": {
            "Description": "LOD distance of pickup",
            "Example": "int object.LODdistance"
        },
        "LandingGearPublicState": {
            "Description": "Landing Gear Public State",
            "Example": "int object.LandingGearPublicState"
        },
        "LandingGearSectionDamageScale": {
            "Description": "damage scale for each plane section",
            "Example": "table<int, number> object.LandingGearSectionDamageScale"
        },
        "LockOnState": {
            "Description": "Lockon state (none, acquiring, acquired)",
            "Example": "int object.LockOnState"
        },
        "LockOnTarget": {
            "Description": "ID of network object this plane is locked-on to",
            "Example": "int object.LockOnTarget"
        },
        "RotorBroken": {
            "Description": "flags indicating which rotors are broken off",
            "Example": "int object.RotorBroken"
        },
        "SectionDamage": {
            "Description": "damage fraction values for each plane section",
            "Example": "table<int, number> object.SectionDamage"
        },
        "SectionDamageScale": {
            "Description": "damage scale for each plane section",
            "Example": "table<int, number> object.SectionDamageScale"
        },
        "dipStraightDownWhenCrashing": {
            "Example": "bool object.dipStraightDownWhenCrashing"
        },
        "disableExlodeFromBodyDamageOnCollision": {
            "Example": "bool object.disableExlodeFromBodyDamageOnCollision"
        },
        "disableExpFromBodyDamage": {
            "Description": "Does this plane take damage from body impacts?",
            "Example": "bool object.disableExpFromBodyDamage"
        }
    },
    "CPlayerAmbientModelStreamingNode": {
        "AllowedPedModelStartOffset": {
            "Example": "int object.AllowedPedModelStartOffset"
        },
        "AllowedVehicleModelStartOffset": {
            "Example": "int object.AllowedVehicleModelStartOffset"
        },
        "TargetVehicleEntryPoint": {
            "Example": "int object.TargetVehicleEntryPoint"
        },
        "TargetVehicleForAnimStreaming": {
            "Example": "int object.TargetVehicleForAnimStreaming"
        }
    },
    "CPlayerAppearanceDataNode": {
        "HasDecorations": {
            "Description": "number of decorations (medals/tattoos)",
            "Example": "bool object.HasDecorations"
        },
        "HasHeadBlendData": {
            "Description": "does this player have custom head data?",
            "Example": "bool object.HasHeadBlendData"
        },
        "HasRespawnObjId": {
            "Description": "has a valid respawn object id",
            "Example": "bool object.HasRespawnObjId"
        },
        "NewModelHash": {
            "Description": "model index for player",
            "Example": "int object.NewModelHash"
        },
        "PackedDecorations": {
            "Description": "texture preset hashes (looked up from collection)",
            "Example": "table<int, int> object.PackedDecorations"
        },
        "RespawnNetObjId": {
            "Description": "ID of the ped used for Team Swapping",
            "Example": "int object.RespawnNetObjId"
        },
        "VoiceHash": {
            "Description": "voice hash code",
            "Example": "int object.VoiceHash"
        },
        "crewEmblemVariation": {
            "Example": "int object.crewEmblemVariation"
        },
        "crewLogoTexHash": {
            "Example": "int object.crewLogoTexHash"
        },
        "crewLogoTxdHash": {
            "Example": "int object.crewLogoTxdHash"
        },
        "facialClipSetId": {
            "Description": "the facial clipset used by the player",
            "Example": "int object.facialClipSetId"
        },
        "facialIdleAnimOverrideClipDictNameHash": {
            "Description": "the dictionary used by the player",
            "Example": "int object.facialIdleAnimOverrideClipDictNameHash"
        },
        "facialIdleAnimOverrideClipNameHash": {
            "Description": "the facial clip used by the player",
            "Example": "int object.facialIdleAnimOverrideClipNameHash"
        },
        "helmetProp": {
            "Description": "which helmet prop are we using?",
            "Example": "int object.helmetProp"
        },
        "helmetTextureId": {
            "Description": "which helmet are we about to put on?",
            "Example": "int object.helmetTextureId"
        },
        "isAttachingHelmet": {
            "Description": "are we attaching a helmet via TaskMotionInAutomobile::State_PutOnHelmet",
            "Example": "bool object.isAttachingHelmet"
        },
        "isRemovingHelmet": {
            "Description": "are we playing secondary priority removing helmet anim?",
            "Example": "bool object.isRemovingHelmet"
        },
        "isVisorSwitching": {
            "Example": "bool object.isVisorSwitching"
        },
        "isWearingHelmet": {
            "Description": "are we wearing a helmet (needed for when we aborting putting one on)",
            "Example": "bool object.isWearingHelmet"
        },
        "networkedDamagePack": {
            "Example": "int object.networkedDamagePack"
        },
        "parachutePackTintIndex": {
            "Description": "Colour of the players' parachute pack",
            "Example": "int object.parachutePackTintIndex"
        },
        "parachuteTintIndex": {
            "Description": "Colour of the players' parachute",
            "Example": "int object.parachuteTintIndex"
        },
        "phoneMode": {
            "Example": "int object.phoneMode"
        },
        "supportsVisor": {
            "Example": "bool object.supportsVisor"
        },
        "targetVisorState": {
            "Example": "int object.targetVisorState"
        },
        "visorIsUp": {
            "Example": "bool object.visorIsUp"
        },
        "visorPropDown": {
            "Description": "which helmet prop are we using?",
            "Example": "int object.visorPropDown"
        },
        "visorPropUp": {
            "Description": "which helmet prop are we using?",
            "Example": "int object.visorPropUp"
        }
    },
    "CPlayerCameraDataNode": {
        "LookAtPosition": {
            "Example": "V3 object.LookAtPosition"
        },
        "Position": {
            "Description": "the position offset of the camera if aiming - or absolute position if using a free camera",
            "Example": "V3 object.Position"
        },
        "UsingCinematicVehCamera": {
            "Description": "if set, this player is using the cinematic vehicle camera",
            "Example": "bool object.UsingCinematicVehCamera"
        },
        "UsingFreeCamera": {
            "Description": "if set, this player is controlling a free camera",
            "Example": "bool object.UsingFreeCamera"
        },
        "UsingLeftTriggerAimMode": {
            "Description": "is this player using the left trigger aim camera mode",
            "Example": "bool object.UsingLeftTriggerAimMode"
        },
        "aiming": {
            "Description": "if the player is currently aiming a weapon",
            "Example": "bool object.aiming"
        },
        "bAimTargetEntity": {
            "Example": "bool object.bAimTargetEntity"
        },
        "canOwnerMoveWhileAiming": {
            "Description": "can the owner move while aiming (changes based on aiming from hip / scope / weapon)",
            "Example": "bool object.canOwnerMoveWhileAiming"
        },
        "eulersX": {
            "Description": "camera matrix euler angles",
            "Example": "number object.eulersX"
        },
        "eulersZ": {
            "Description": "camera matrix euler angles",
            "Example": "number object.eulersZ"
        },
        "freeAimLockedOnTarget": {
            "Description": "if the player is free aim locked onto a target...",
            "Example": "bool object.freeAimLockedOnTarget"
        },
        "inFirstPersonIdle": {
            "Example": "bool object.inFirstPersonIdle"
        },
        "isLooking": {
            "Example": "bool object.isLooking"
        },
        "largeOffset": {
            "Description": "if set, the camera is far away from the player",
            "Example": "bool object.largeOffset"
        },
        "lockOnTargetOffset": {
            "Description": "if locked onto a target, offset from target position to actual lock on pos.",
            "Example": "V3 object.lockOnTargetOffset"
        },
        "longRange": {
            "Description": "if the player is aiming a long range weapon (sniper rifle - 1500m range) or short range (<150m)",
            "Example": "bool object.longRange"
        },
        "morePrecision": {
            "Description": "if set, more precise camera data is used",
            "Example": "bool object.morePrecision"
        },
        "onSlope": {
            "Example": "bool object.onSlope"
        },
        "playerToTargetAimOffset": {
            "Description": "position we're aiming at (used to compute pitch and yaw on the clone).",
            "Example": "V3 object.playerToTargetAimOffset"
        },
        "stickWithinStrafeAngle": {
            "Example": "bool object.stickWithinStrafeAngle"
        },
        "targetId": {
            "Description": "if we're aiming at a target we pass that info instead of pitch and yaw.",
            "Example": "int object.targetId"
        },
        "usingFirstPersonCamera": {
            "Example": "bool object.usingFirstPersonCamera"
        },
        "usingFirstPersonVehicleCamera": {
            "Example": "bool object.usingFirstPersonVehicleCamera"
        },
        "usingSwimMotionTask": {
            "Example": "bool object.usingSwimMotionTask"
        }
    },
    "CPlayerCreationDataNode": {
        "ModelHash": {
            "Example": "int object.ModelHash"
        },
        "NumBloodMarks": {
            "Example": "int object.NumBloodMarks"
        },
        "NumScars": {
            "Example": "int object.NumScars"
        },
        "hasCommunicationPrivileges": {
            "Example": "bool object.hasCommunicationPrivileges"
        },
        "wearingAHelmet": {
            "Description": "only want to apply this once and then it's derived locally...",
            "Example": "bool object.wearingAHelmet"
        }
    },
    "CPlayerGameStateDataNode": {
        "AirDragMult": {
            "Description": "air drag multiplier",
            "Example": "number object.AirDragMult"
        },
        "AntagonisticPlayerIndex": {
            "Description": "Antagonistic player index",
            "Example": "int object.AntagonisticPlayerIndex"
        },
        "ConcealedOnOwner": {
            "Description": "true when local player concealed themselves",
            "Example": "bool object.ConcealedOnOwner"
        },
        "EnableCrewEmblem": {
            "Description": "Does the ped use the crew emblem?",
            "Example": "bool object.EnableCrewEmblem"
        },
        "FadeOut": {
            "Example": "bool object.FadeOut"
        },
        "GameStateFlags": {
            "Description": "game state flags",
            "Example": "PlayerGameStateFlags object.GameStateFlags"
        },
        "GarageInstanceIndex": {
            "Example": "int object.GarageInstanceIndex"
        },
        "IsTargettableByTeam": {
            "Description": "flags indicating whether the ped is targettable by each team //",
            "Example": "int object.IsTargettableByTeam"
        },
        "JackSpeed": {
            "Description": "jack speed percentage for the player",
            "Example": "int object.JackSpeed"
        },
        "LockOnState": {
            "Example": "int object.LockOnState"
        },
        "LockOnTargetID": {
            "Description": "for when players use homing launchers",
            "Example": "int object.LockOnTargetID"
        },
        "MaxArmour": {
            "Description": "max armour for the player",
            "Example": "int object.MaxArmour"
        },
        "MaxHealth": {
            "Description": "max health for the player",
            "Example": "int object.MaxHealth"
        },
        "MeleeDamageModifier": {
            "Example": "number object.MeleeDamageModifier"
        },
        "MeleeUnarmedDamageModifier": {
            "Example": "number object.MeleeUnarmedDamageModifier"
        },
        "MobileRingState": {
            "Description": "mobile phone ring state for the player",
            "Example": "int object.MobileRingState"
        },
        "OverrideReceiveChat": {
            "Description": "Override Receive Chat",
            "Example": "int object.OverrideReceiveChat"
        },
        "OverrideSendChat": {
            "Description": "Override Send Chat //",
            "Example": "int object.OverrideSendChat"
        },
        "PlayerState": {
            "Description": "the current player state",
            "Example": "int object.PlayerState"
        },
        "PlayerTeam": {
            "Description": "current player team",
            "Example": "int object.PlayerTeam"
        },
        "ScriptedWeaponFirePos": {
            "Example": "V3 object.ScriptedWeaponFirePos"
        },
        "SpectatorId": {
            "Description": "Network Object of the ped we are spectating",
            "Example": "int object.SpectatorId"
        },
        "TutorialIndex": {
            "Description": "Tutorial session index - used to split players into fake sessions including only team-mates",
            "Example": "int object.TutorialIndex"
        },
        "TutorialInstanceID": {
            "Description": "Current tutorial instance ID (only used for gang sessions)",
            "Example": "int object.TutorialInstanceID"
        },
        "VehicleJumpDown": {
            "Example": "bool object.VehicleJumpDown"
        },
        "VehicleShareMultiplier": {
            "Example": "number object.VehicleShareMultiplier"
        },
        "WeaponDamageModifier": {
            "Example": "number object.WeaponDamageModifier"
        },
        "WeaponDefenseModifier": {
            "Example": "number object.WeaponDefenseModifier"
        },
        "WeaponMinigunDefenseModifier": {
            "Example": "number object.WeaponMinigunDefenseModifier"
        },
        "arcadeCNCVOffender": {
            "Example": "bool object.arcadeCNCVOffender"
        },
        "arcadePassiveAbilityFlags": {
            "Example": "int object.arcadePassiveAbilityFlags"
        },
        "arcadeRoleInt": {
            "Example": "int object.arcadeRoleInt"
        },
        "arcadeTeamInt": {
            "Example": "int object.arcadeTeamInt"
        },
        "bBattleAware": {
            "Example": "bool object.bBattleAware"
        },
        "bCollisionsDisabledByScript": {
            "Description": "used for spectating players, that have other collision flags set",
            "Example": "bool object.bCollisionsDisabledByScript"
        },
        "bDisableLeavePedBehind": {
            "Description": "Disable Leave ped behind when the remote player leaves the session.",
            "Example": "bool object.bDisableLeavePedBehind"
        },
        "bGhost": {
            "Example": "bool object.bGhost"
        },
        "bHasScriptedWeaponFirePos": {
            "Example": "bool object.bHasScriptedWeaponFirePos"
        },
        "bHasVoiceProximityOverride": {
            "Description": "If we have a voice proximity override",
            "Example": "bool object.bHasVoiceProximityOverride"
        },
        "bInCutscene": {
            "Description": "player is in a mocap cutscene",
            "Example": "bool object.bInCutscene"
        },
        "bIsChokingFromDOTEffect": {
            "Example": "bool object.bIsChokingFromDOTEffect"
        },
        "bIsFriendlyFireAllowed": {
            "Example": "bool object.bIsFriendlyFireAllowed"
        },
        "bIsPassiveMode": {
            "Example": "bool object.bIsPassiveMode"
        },
        "bIsSCTVSpectating": {
            "Description": "true when player is SCTV spectator",
            "Example": "bool object.bIsSCTVSpectating"
        },
        "bIsShockedFromDOTEffect": {
            "Example": "bool object.bIsShockedFromDOTEffect"
        },
        "bIsSuperJump": {
            "Example": "bool object.bIsSuperJump"
        },
        "bOverrideTransitionChat": {
            "Description": "Override Transition Chat",
            "Example": "bool object.bOverrideTransitionChat"
        },
        "bOverrideTutorialChat": {
            "Description": "Override Tutorial Chat",
            "Example": "bool object.bOverrideTutorialChat"
        },
        "bUseExtendedPopulationRange": {
            "Example": "bool object.bUseExtendedPopulationRange"
        },
        "bvehicleweaponindex": {
            "Description": "Indicator whether the VWI is sent",
            "Example": "bool object.bvehicleweaponindex"
        },
        "decoratorListCount": {
            "Description": "count of decorator extensions ( the scripted ones )",
            "Example": "int object.decoratorListCount"
        },
        "fVoiceLoudness": {
            "Description": "Loudness of player voice through microphone",
            "Example": "number object.fVoiceLoudness"
        },
        "nCharacterRank": {
            "Example": "int object.nCharacterRank"
        },
        "nMentalState": {
            "Example": "int object.nMentalState"
        },
        "nPedDensity": {
            "Example": "int object.nPedDensity"
        },
        "nPropertyID": {
            "Example": "int object.nPropertyID"
        },
        "nVoiceChannel": {
            "Description": "Voice channel this player is in",
            "Example": "int object.nVoiceChannel"
        },
        "sizeOfNetArrayData": {
            "Description": "the total size of all the network array handler data arbitrated by this player",
            "Example": "int object.sizeOfNetArrayData"
        },
        "vExtendedPopulationRangeCenter": {
            "Example": "V3 object.vExtendedPopulationRangeCenter"
        },
        "vVoiceProximityOverride": {
            "Description": "Proximity override",
            "Example": "V3 object.vVoiceProximityOverride"
        },
        "vehicleweaponindex": {
            "Description": "Vehicle Weapon Index: Missiles, Gatling, etc...",
            "Example": "int object.vehicleweaponindex"
        }
    },
    "CPlayerInfo": {
        "CachedSprintMultThisFrame": {
            "Example": "number object.CachedSprintMultThisFrame"
        },
        "ExplosiveDamageModifier": {
            "Example": "number object.ExplosiveDamageModifier"
        },
        "ForceAirDragMult": {
            "Description": "Affects the air drag of the player's current car/bike",
            "Example": "number object.ForceAirDragMult"
        },
        "FriendStatus": {
            "Example": "int object.FriendStatus"
        },
        "HavocCaused": {
            "Description": "A counter going up when the player does bad stuff.",
            "Example": "int object.HavocCaused"
        },
        "JackSpeed": {
            "Description": "2 bytes",
            "Example": "int object.JackSpeed"
        },
        "LastChangeWeaponFrame": {
            "Example": "int object.LastChangeWeaponFrame"
        },
        "LastTargetVehicle": {
            "Description": "Last vehicle player tried to enter.",
            "Example": "CVehicle object.LastTargetVehicle"
        },
        "MaxArmour": {
            "Description": "2 bytes",
            "Example": "int object.MaxArmour"
        },
        "MaxExplosiveDamage": {
            "Example": "number object.MaxExplosiveDamage"
        },
        "MaxHealth": {
            "Description": "2 bytes",
            "Example": "int object.MaxHealth"
        },
        "MaxSprintEnergy": {
            "Example": "number object.MaxSprintEnergy"
        },
        "MeleeUnarmedDamageModifier": {
            "Example": "number object.MeleeUnarmedDamageModifier"
        },
        "MeleeWeaponDamageModifier": {
            "Example": "number object.MeleeWeaponDamageModifier"
        },
        "MeleeWeaponDefenseModifier": {
            "Example": "number object.MeleeWeaponDefenseModifier"
        },
        "MeleeWeaponForceModifier": {
            "Example": "number object.MeleeWeaponForceModifier"
        },
        "NetData": {
            "Description": "structure to GamerInfo holding information about the player",
            "Example": "GamerInfo object.NetData"
        },
        "NumEnemiesInCombat": {
            "Description": "A count of the number of enemy peds in combat targetting this player.",
            "Example": "int object.NumEnemiesInCombat"
        },
        "NumEnemiesShootingInCombat": {
            "Description": "A count of the number of enemy peds shooting at this player.",
            "Example": "int object.NumEnemiesShootingInCombat"
        },
        "OnlyEnterThisVehicle": {
            "Description": "Restrict the player to only being able to enter this vehicle (script-controlled)\t",
            "Example": "CVehicle object.OnlyEnterThisVehicle"
        },
        "PlayerGroup": {
            "Example": "int object.PlayerGroup"
        },
        "PlayerPed": {
            "Description": "Pointer to the player ped (should always be set)",
            "Example": "CPed object.PlayerPed"
        },
        "PlayerState": {
            "Description": "PLAYERSTATE_INVALID = -1, PLAYERSTATE_PLAYING, PLAYERSTATE_HASDIED, PLAYERSTATE_HASBEENARRESTED, PLAYERSTATE_FAILEDMISSION, PLAYERSTATE_LEFTGAME, PLAYERSTATE_RESPAWN, PLAYERSTATE_IN_MP_CUTSCENE",
            "Example": "int object.PlayerState"
        },
        "PreferFrontPassengerSeatVehicle": {
            "Description": "Script can prefer the player to enter the front passenger seat for this vehicle",
            "Example": "CVehicle object.PreferFrontPassengerSeatVehicle"
        },
        "PreferRearSeatsVehicle": {
            "Description": "Script can prefer the player to enter the rear seats for this vehicle",
            "Example": "CVehicle object.PreferRearSeatsVehicle"
        },
        "RunSprintSpeedMultiplier": {
            "Example": "number object.RunSprintSpeedMultiplier"
        },
        "SpotterOfStolenVehicle": {
            "Example": "CPed object.SpotterOfStolenVehicle"
        },
        "SprintControlCounter": {
            "Example": "number object.SprintControlCounter"
        },
        "SprintEnergy": {
            "Example": "number object.SprintEnergy"
        },
        "StealthRate": {
            "Example": "number object.StealthRate"
        },
        "SwimSpeedMultiplier": {
            "Example": "number object.SwimSpeedMultiplier"
        },
        "Team": {
            "Description": "The player's team (in network game)",
            "Example": "int object.Team"
        },
        "TimeBikeSprintPressed": {
            "Example": "int object.TimeBikeSprintPressed"
        },
        "VehicleDamageModifier": {
            "Example": "number object.VehicleDamageModifier"
        },
        "VehicleDefenseModifier": {
            "Example": "number object.VehicleDefenseModifier"
        },
        "WeaponDamageModifier": {
            "Example": "number object.WeaponDamageModifier"
        },
        "WeaponDefenseModifier": {
            "Example": "number object.WeaponDefenseModifier"
        },
        "WeaponMinigunDefenseModifier": {
            "Example": "number object.WeaponMinigunDefenseModifier"
        },
        "WeaponTakedownDefenseModifier": {
            "Example": "number object.WeaponTakedownDefenseModifier"
        }
    },
    "CPlayerSectorPosNode": {
        "IsOnStairs": {
            "Description": "is this player standing on stairs?",
            "Example": "bool object.IsOnStairs"
        },
        "IsRagdolling": {
            "Description": "is this player ragdolling?",
            "Example": "bool object.IsRagdolling"
        },
        "IsStandingOnNetworkObject": {
            "Description": "is this player currently standing on another network object?",
            "Example": "bool object.IsStandingOnNetworkObject"
        },
        "LocalOffset": {
            "Description": "Offset from the center of the object",
            "Example": "V3 object.LocalOffset"
        },
        "PackedStealthNoise": {
            "Description": "the serialised players current stealth noise",
            "Example": "int object.PackedStealthNoise"
        },
        "SectorPosX": {
            "Description": "X position of this object within the current sector",
            "Example": "number object.SectorPosX"
        },
        "SectorPosY": {
            "Description": "Y position of this object within the current sector",
            "Example": "number object.SectorPosY"
        },
        "SectorPosZ": {
            "Description": "Z position of this object within the current sector",
            "Example": "number object.SectorPosZ"
        },
        "StandingOnNetworkObjectID": {
            "Description": "ID of the object this player is standing on",
            "Example": "int object.StandingOnNetworkObjectID"
        },
        "StealthNoise": {
            "Description": "the players current stealth noise",
            "Example": "number object.StealthNoise"
        }
    },
    "CSectorDataNode": {
        "sectorX": {
            "Description": "X sector this object is currently within",
            "Example": "int object.sectorX"
        },
        "sectorY": {
            "Description": "Y sector this object is currently within",
            "Example": "int object.sectorY"
        },
        "sectorZ": {
            "Description": "Z sector this object is currently within",
            "Example": "int object.sectorZ"
        }
    },
    "CSectorPositionDataNode": {
        "sectorPosX": {
            "Description": "X position of this object within the current sector",
            "Example": "number object.sectorPosX"
        },
        "sectorPosY": {
            "Description": "Y position of this object within the current sector",
            "Example": "number object.sectorPosY"
        },
        "sectorPosZ": {
            "Description": "Z position of this object within the current sector",
            "Example": "number object.sectorPosZ"
        }
    },
    "CSubmarineControlDataNode": {
        "dive": {
            "Description": "the current value of the dive control.",
            "Example": "number object.dive"
        },
        "pitch": {
            "Description": "the current value of the pitch control.",
            "Example": "number object.pitch"
        },
        "yaw": {
            "Description": "the current value of the yaw control.",
            "Example": "number object.yaw"
        }
    },
    "CSubmarineGameStateDataNode": {
        "IsAnchored": {
            "Description": "is this submarine anchored?",
            "Example": "bool object.IsAnchored"
        }
    },
    "CTaskData": {
        "TaskData": {
            "Example": "table<int, int> object.TaskData"
        },
        "TaskDataSize": {
            "Example": "int object.TaskDataSize"
        },
        "TaskType": {
            "Example": "int object.TaskType"
        }
    },
    "CTrainGameStateDataNode": {
        "AllowRemovalByPopulation": {
            "Description": "used by stationary trains in missions",
            "Example": "bool object.AllowRemovalByPopulation"
        },
        "CarriageConfigIndex": {
            "Description": "Config index of the carriage",
            "Example": "int object.CarriageConfigIndex"
        },
        "CruiseSpeed": {
            "Description": "the target cruise speed of the train (desired speed)",
            "Example": "number object.CruiseSpeed"
        },
        "Direction": {
            "Description": "Direction traveling on track",
            "Example": "bool object.Direction"
        },
        "DistFromEngine": {
            "Description": "the distance of this carriage from the engine (0.0 if this is an engine)",
            "Example": "number object.DistFromEngine"
        },
        "EngineID": {
            "Description": "ID of the engine this carriage is attached to (if this train is not an engine)",
            "Example": "int object.EngineID"
        },
        "HasPassengerCarriages": {
            "Description": "Does this train have any passenger carriages?",
            "Example": "bool object.HasPassengerCarriages"
        },
        "IsCaboose": {
            "Description": "Is this a caboose",
            "Example": "bool object.IsCaboose"
        },
        "IsEngine": {
            "Description": "is this train an engine or carriage?",
            "Example": "bool object.IsEngine"
        },
        "IsMissionTrain": {
            "Description": "Is this a mission created train?",
            "Example": "bool object.IsMissionTrain"
        },
        "LinkedToBackwardID": {
            "Description": "ID of the car linked backward from this train car",
            "Example": "int object.LinkedToBackwardID"
        },
        "LinkedToForwardID": {
            "Description": "ID of the car linked forward from this train car",
            "Example": "int object.LinkedToForwardID"
        },
        "RenderDerailed": {
            "Description": "Should this train be rendered as derailed?",
            "Example": "bool object.RenderDerailed"
        },
        "StopForStations": {
            "Description": "Stop for stations",
            "Example": "bool object.StopForStations"
        },
        "TrackID": {
            "Description": "the track the train is on",
            "Example": "int object.TrackID"
        },
        "TrainConfigIndex": {
            "Description": "Config index of the entire train this carriage/engine is a part of",
            "Example": "int object.TrainConfigIndex"
        },
        "TrainState": {
            "Description": "the train state",
            "Example": "int object.TrainState"
        },
        "UseHighPrecisionBlending": {
            "Description": "are we using high precision blending on the train",
            "Example": "bool object.UseHighPrecisionBlending"
        },
        "doorsForcedOpen": {
            "Description": "force the doors open",
            "Example": "bool object.doorsForcedOpen"
        }
    },
    "CVehicle": {
        "BodyDirtColor": {
            "Example": "int object.BodyDirtColor"
        },
        "BodyHealth": {
            "Example": "number object.BodyHealth"
        },
        "Brake": {
            "Example": "number object.Brake"
        },
        "CheatPowerIncrease": {
            "Example": "number object.CheatPowerIncrease"
        },
        "DirtLevel": {
            "Description": "0.0=fully clean, 15.0=maximum dirt visible",
            "Example": "number object.DirtLevel"
        },
        "DisableInvincible": {
            "Example": "void object:DisableInvincible()"
        },
        "EnableInvincible": {
            "Example": "void object:EnableInvincible()"
        },
        "FromAddress": {
            "Example": "CVehicle CVehicle.FromAddress(int address)"
        },
        "GetAddress": {
            "Example": "int object:GetAddress()"
        },
        "GetAttachmentExtension": {
            "Description": "Check if the extension is not nil before using it.",
            "Example": "fwAttachmentEntityExtension object:GetAttachmentExtension()"
        },
        "GetDriver": {
            "Example": "CPed object:GetDriver()"
        },
        "GetLastDriver": {
            "Example": "CPed object:GetLastDriver()"
        },
        "GetMaxSeats": {
            "Example": "int object:GetMaxSeats()"
        },
        "GetPedInSeat": {
            "Example": "CPed object:GetPedInSeat(int seatIndex)"
        },
        "GetType": {
            "Example": "eEntityType object:GetType()"
        },
        "GetVelocity": {
            "Description": "Returns the current velocity vector in meters per second.",
            "Example": "V3 object:GetVelocity()"
        },
        "HandBrake": {
            "Example": "bool object.HandBrake"
        },
        "HeadlightMultiplier": {
            "Example": "number object.HeadlightMultiplier"
        },
        "HeightMultiplier": {
            "Example": "number object.HeightMultiplier"
        },
        "IsDynamic": {
            "Example": "bool object.IsDynamic"
        },
        "IsFixed": {
            "Example": "bool object.IsFixed"
        },
        "IsFixedByNetwork": {
            "Example": "bool object.IsFixedByNetwork"
        },
        "IsInWater": {
            "Example": "bool object.IsInWater"
        },
        "IsInvincible": {
            "Example": "bool object:IsInvincible()"
        },
        "IsNotBuoyant": {
            "Example": "bool object.IsNotBuoyant"
        },
        "IsObject": {
            "Example": "bool object:IsObject()"
        },
        "IsPed": {
            "Example": "bool object:IsPed()"
        },
        "IsPhysical": {
            "Example": "bool object:IsPhysical()"
        },
        "IsRenderScorched": {
            "Example": "bool object.IsRenderScorched"
        },
        "IsVehicle": {
            "Example": "bool object:IsVehicle()"
        },
        "IsVisible": {
            "Example": "bool object.IsVisible"
        },
        "ModelInfo": {
            "Description": "Check if 'object.ModelInfo' is not nil before using it.",
            "Example": "CBaseModelInfo object.ModelInfo"
        },
        "NetObject": {
            "Description": "Check if 'object.NetObject' is not nil before using it.",
            "Example": "CNetObject object.NetObject"
        },
        "Nitrous": {
            "Example": "bool object.Nitrous"
        },
        "PetrolTankHealth": {
            "Example": "number object.PetrolTankHealth"
        },
        "Position": {
            "Example": "V3 object.Position"
        },
        "SecondSteerAngle": {
            "Description": "This is for 4 wheel steering.",
            "Example": "number object.SecondSteerAngle"
        },
        "SteerAngle": {
            "Example": "number object.SteerAngle"
        },
        "ThicknessMultiplier": {
            "Example": "number object.ThicknessMultiplier"
        },
        "Throttle": {
            "Example": "number object.Throttle"
        },
        "VehicleTopSpeedPercent": {
            "Example": "number object.VehicleTopSpeedPercent"
        },
        "WidthMultiplier": {
            "Example": "number object.WidthMultiplier"
        }
    },
    "CVehicleAppearanceDataNode": {
        "LicencePlateTexIndex": {
            "Description": "Licence plate texture index.",
            "Example": "int object.LicencePlateTexIndex"
        },
        "VehicleBadge": {
            "Example": "bool object.VehicleBadge"
        },
        "allKitMods": {
            "Example": "table<int, int> object.allKitMods"
        },
        "bSmokeColor": {
            "Description": "has a smoke color",
            "Example": "bool object.bSmokeColor"
        },
        "bVehicleBadgeData": {
            "Example": "table<int, bool> object.bVehicleBadgeData"
        },
        "bWindowTint": {
            "Description": "has a window tint",
            "Example": "bool object.bWindowTint"
        },
        "bodyColour1": {
            "Description": "vehicle body colour 1",
            "Example": "int object.bodyColour1"
        },
        "bodyColour2": {
            "Description": "vehicle body colour 2",
            "Example": "int object.bodyColour2"
        },
        "bodyColour3": {
            "Description": "vehicle body colour 3",
            "Example": "int object.bodyColour3"
        },
        "bodyColour4": {
            "Description": "vehicle body colour 4",
            "Example": "int object.bodyColour4"
        },
        "bodyColour5": {
            "Description": "vehicle body colour 5",
            "Example": "int object.bodyColour5"
        },
        "bodyColour6": {
            "Description": "vehicle body colour 6",
            "Example": "int object.bodyColour6"
        },
        "bodyDirtLevel": {
            "Description": "vehicle body dirt level",
            "Example": "int object.bodyDirtLevel"
        },
        "customPrimaryB": {
            "Description": "custom secondary color B",
            "Example": "int object.customPrimaryB"
        },
        "customPrimaryColor": {
            "Example": "bool object.customPrimaryColor"
        },
        "customPrimaryG": {
            "Description": "custom secondary color G",
            "Example": "int object.customPrimaryG"
        },
        "customPrimaryR": {
            "Description": "custom secondary color R",
            "Example": "int object.customPrimaryR"
        },
        "customSecondaryB": {
            "Description": "custom secondary color B",
            "Example": "int object.customSecondaryB"
        },
        "customSecondaryColor": {
            "Example": "bool object.customSecondaryColor"
        },
        "customSecondaryG": {
            "Description": "custom secondary color G",
            "Example": "int object.customSecondaryG"
        },
        "customSecondaryR": {
            "Description": "custom secondary color R",
            "Example": "int object.customSecondaryR"
        },
        "disableExtras": {
            "Description": "bit flags indicating which \"extra\" car parts are disabled",
            "Example": "int object.disableExtras"
        },
        "envEffScale": {
            "Example": "int object.envEffScale"
        },
        "hasDifferentRearWheel": {
            "Description": "has a rear wheel that might have a different type (bikes)",
            "Example": "bool object.hasDifferentRearWheel"
        },
        "hasLivery2ID": {
            "Example": "bool object.hasLivery2ID"
        },
        "hasLiveryID": {
            "Example": "bool object.hasLiveryID"
        },
        "horntype": {
            "Example": "int object.horntype"
        },
        "kitIndex": {
            "Description": "the kit index that the variation data is using",
            "Example": "int object.kitIndex"
        },
        "licencePlate": {
            "Description": "Licence Plate",
            "Example": "table<int, int> object.licencePlate"
        },
        "livery2ID": {
            "Description": "ID of the livery2 for the vehicle",
            "Example": "int object.livery2ID"
        },
        "liveryID": {
            "Description": "ID of the livery for the vehicle",
            "Example": "int object.liveryID"
        },
        "neonBOn": {
            "Example": "bool object.neonBOn"
        },
        "neonColorB": {
            "Description": "neon color B",
            "Example": "int object.neonColorB"
        },
        "neonColorG": {
            "Description": "neon color G",
            "Example": "int object.neonColorG"
        },
        "neonColorR": {
            "Description": "neon color R",
            "Example": "int object.neonColorR"
        },
        "neonFOn": {
            "Example": "bool object.neonFOn"
        },
        "neonLOn": {
            "Example": "bool object.neonLOn"
        },
        "neonOn": {
            "Example": "bool object.neonOn"
        },
        "neonROn": {
            "Example": "bool object.neonROn"
        },
        "neonSuppressed": {
            "Example": "bool object.neonSuppressed"
        },
        "rearWheelMod": {
            "Description": "rear wheel mod value (for bikes)",
            "Example": "int object.rearWheelMod"
        },
        "smokeColorB": {
            "Description": "smoke color B",
            "Example": "int object.smokeColorB"
        },
        "smokeColorG": {
            "Description": "smoke color G",
            "Example": "int object.smokeColorG"
        },
        "smokeColorR": {
            "Description": "smoke color R",
            "Example": "int object.smokeColorR"
        },
        "toggleMods": {
            "Description": "bitfield of the toggle mods that are switched on",
            "Example": "int object.toggleMods"
        },
        "wheelMod": {
            "Description": "wheel mod value",
            "Example": "int object.wheelMod"
        },
        "wheelType": {
            "Description": "wheel type value",
            "Example": "int object.wheelType"
        },
        "wheelVariation0": {
            "Example": "bool object.wheelVariation0"
        },
        "wheelVariation1": {
            "Example": "bool object.wheelVariation1"
        },
        "windowTint": {
            "Description": "window tint",
            "Example": "int object.windowTint"
        }
    },
    "CVehicleControlDataNode": {
        "BVTHControlVertVel": {
            "Description": "CTaskBringVehicleToHalt bControlVerticalVelocity",
            "Example": "bool object.BVTHControlVertVel"
        },
        "BVTHStoppingDist": {
            "Description": "CTaskBringVehicleToHalt stopping dist",
            "Example": "number object.BVTHStoppingDist"
        },
        "HasTargetGravityScale": {
            "Description": "For hover vehicles",
            "Example": "bool object.HasTargetGravityScale"
        },
        "HasTopSpeedPercentage": {
            "Example": "bool object.HasTopSpeedPercentage"
        },
        "StickY": {
            "Example": "number object.StickY"
        },
        "SubCarDive": {
            "Description": "the current value of the dive control for sub cars",
            "Example": "number object.SubCarDive"
        },
        "SubCarPitch": {
            "Description": "the current value of the pitch control for sub cars",
            "Example": "number object.SubCarPitch"
        },
        "TargetGravityScale": {
            "Example": "number object.TargetGravityScale"
        },
        "bAllLowriderHydraulicsRaised": {
            "Description": "CTaskVehiclePlayerDriveAutomobile::ProcessDriverInputsForPlayerOnUpdate; player has raised all lowrider suspension",
            "Example": "bool object.bAllLowriderHydraulicsRaised"
        },
        "bIsClosingAnyDoor": {
            "Example": "bool object.bIsClosingAnyDoor"
        },
        "bIsNitrousOverrideActive": {
            "Example": "bool object.bIsNitrousOverrideActive"
        },
        "bModifiedLowriderSuspension": {
            "Description": "CTaskVehiclePlayerDriveAutomobile::ProcessDriverInputsForPlayerOnUpdate; player has modified suspension of lowrider",
            "Example": "bool object.bModifiedLowriderSuspension"
        },
        "bNitrousActive": {
            "Example": "bool object.bNitrousActive"
        },
        "bPlayHydraulicsActivationSound": {
            "Description": "Hydraulics sound effect when activated",
            "Example": "bool object.bPlayHydraulicsActivationSound"
        },
        "bPlayHydraulicsBounceSound": {
            "Description": "Hydraulics sound effect when bouncing",
            "Example": "bool object.bPlayHydraulicsBounceSound"
        },
        "bPlayHydraulicsDeactivationSound": {
            "Description": "Hydraulics sound effect when de-activated",
            "Example": "bool object.bPlayHydraulicsDeactivationSound"
        },
        "brakePedal": {
            "Description": "the current value of the brake pedal",
            "Example": "number object.brakePedal"
        },
        "bringVehicleToHalt": {
            "Description": "CTaskBringVehicleToHalt is running as a secondary task",
            "Example": "bool object.bringVehicleToHalt"
        },
        "fLowriderSuspension": {
            "Description": "Syncs modified lowrider suspension values",
            "Example": "table<int, number> object.fLowriderSuspension"
        },
        "isInBurnout": {
            "Example": "bool object.isInBurnout"
        },
        "isSubCar": {
            "Example": "bool object.isSubCar"
        },
        "kersActive": {
            "Description": "indicates if the kers system is active",
            "Example": "bool object.kersActive"
        },
        "numWheels": {
            "Description": "number of wheels on this car",
            "Example": "int object.numWheels"
        },
        "reducedSuspensionForce": {
            "Description": "reduced suspension force used to \"stance\" tuner pack vehicles",
            "Example": "bool object.reducedSuspensionForce"
        },
        "roadNodeAddress": {
            "Description": "the current road node the vehicle is driving from",
            "Example": "int object.roadNodeAddress"
        },
        "subCarYaw": {
            "Description": "the current value of the yaw control for sub cars",
            "Example": "number object.subCarYaw"
        },
        "throttle": {
            "Description": "the current value of the throttle",
            "Example": "number object.throttle"
        },
        "topSpeedPercent": {
            "Description": "set to the maximum speed a vehicle can travel at",
            "Example": "number object.topSpeedPercent"
        }
    },
    "CVehicleCreationDataNode": {
        "lastDriverTime": {
            "Description": "the last time this vehicle had a driver",
            "Example": "int object.lastDriverTime"
        },
        "maxHealth": {
            "Description": "max health as it can be altered",
            "Example": "int object.maxHealth"
        },
        "modelHash": {
            "Description": "vehicle model index",
            "Example": "int object.modelHash"
        },
        "needsToBeHotwired": {
            "Description": "does the car need to be hotwired?",
            "Example": "bool object.needsToBeHotwired"
        },
        "popType": {
            "Description": "population type",
            "Example": "int object.popType"
        },
        "randomSeed": {
            "Description": "random seed",
            "Example": "int object.randomSeed"
        },
        "status": {
            "Description": "vehicle status flags",
            "Example": "int object.status"
        },
        "takeOutOfParkedCarBudget": {
            "Description": "should this vehicle be taken out of the parked car population budget?",
            "Example": "bool object.takeOutOfParkedCarBudget"
        },
        "tyresDontBurst": {
            "Description": "are the tyres impervious to damage?",
            "Example": "bool object.tyresDontBurst"
        },
        "usesVerticalFlightMode": {
            "Description": "true when it's a plane and uses special flight mode",
            "Example": "bool object.usesVerticalFlightMode"
        }
    },
    "CVehicleGadgetDataNode": {
        "GadgetData": {
            "Example": "table<int, GadgetData> object.GadgetData"
        },
        "IsAttachedTrailer": {
            "Example": "bool object.IsAttachedTrailer"
        },
        "NumGadgets": {
            "Example": "int object.NumGadgets"
        },
        "OffsetFromParentVehicle": {
            "Example": "V3 object.OffsetFromParentVehicle"
        }
    },
    "CVehicleGameStateDataNode": {
        "AICanUseExclusiveSeats": {
            "Description": "AI can use driver seat even if marked exclusive",
            "Example": "bool object.AICanUseExclusiveSeats"
        },
        "DontTryToEnterThisVehicleIfLockedForPlayer": {
            "Description": "should players attempt to enter vehicle if its locked for them?",
            "Example": "bool object.DontTryToEnterThisVehicleIfLockedForPlayer"
        },
        "ExtraBrokenFlags": {
            "Example": "int object.ExtraBrokenFlags"
        },
        "HeadlightMultiplier": {
            "Example": "number object.HeadlightMultiplier"
        },
        "OverridenVehHornHash": {
            "Description": "Hash of a horn sound used for overriden vehicle horn",
            "Example": "int object.OverridenVehHornHash"
        },
        "OverridingVehHorn": {
            "Description": "Is vehicle horn has been overriden",
            "Example": "bool object.OverridingVehHorn"
        },
        "PlayerLocks": {
            "Example": "int object.PlayerLocks"
        },
        "RemoveAggressivelyForCarjackingMission": {
            "Description": "Allows the vehicle to be removed aggressively during the car jacking missions",
            "Example": "bool object.RemoveAggressivelyForCarjackingMission"
        },
        "UnFreezeWhenCleaningUp": {
            "Description": "Vehicle flag set by script but can't be synced in script node because it would reset",
            "Example": "bool object.UnFreezeWhenCleaningUp"
        },
        "alarmActivated": {
            "Description": "is the alarm activated",
            "Example": "bool object.alarmActivated"
        },
        "alarmSet": {
            "Description": "is the alarm set?",
            "Example": "bool object.alarmSet"
        },
        "canEjectPassengersIfLocked": {
            "Example": "bool object.canEjectPassengersIfLocked"
        },
        "checkForEnoughRoomToFitPed": {
            "Example": "bool object.checkForEnoughRoomToFitPed"
        },
        "customPathNodeStreamingRadius": {
            "Example": "number object.customPathNodeStreamingRadius"
        },
        "detachedTombStone": {
            "Example": "bool object.detachedTombStone"
        },
        "disableSuperDummy": {
            "Example": "bool object.disableSuperDummy"
        },
        "doorIndividualLockedState": {
            "Example": "table<int, int> object.doorIndividualLockedState"
        },
        "doorIndividualLockedStateFilter": {
            "Example": "int object.doorIndividualLockedStateFilter"
        },
        "doorLockState": {
            "Description": "door lock state",
            "Example": "int object.doorLockState"
        },
        "doorsBroken": {
            "Description": "doors broken state",
            "Example": "int object.doorsBroken"
        },
        "doorsNotAllowedToBeBrokenOff": {
            "Description": "if the doors are not allowed to be broken off bitmask",
            "Example": "int object.doorsNotAllowedToBeBrokenOff"
        },
        "doorsOpen": {
            "Description": "doors open state",
            "Example": "int object.doorsOpen"
        },
        "doorsOpenRatio": {
            "Description": "doors open ratio",
            "Example": "table<int, int> object.doorsOpenRatio"
        },
        "downforceModifierFront": {
            "Example": "number object.downforceModifierFront"
        },
        "downforceModifierRear": {
            "Example": "number object.downforceModifierRear"
        },
        "driftTyres": {
            "Example": "bool object.driftTyres"
        },
        "engineOn": {
            "Description": "is this vehicle's engine currently on?",
            "Example": "bool object.engineOn"
        },
        "engineSkipEngineStartup": {
            "Description": "if the audio for the engine startup should be skipped",
            "Example": "bool object.engineSkipEngineStartup"
        },
        "engineStarting": {
            "Description": "is the engine starting",
            "Example": "bool object.engineStarting"
        },
        "exclusiveDriverPedID": {
            "Description": "exclusive driver (only peds that can drive this vehicle).",
            "Example": "table<int, int> object.exclusiveDriverPedID"
        },
        "flaggedForCleanup": {
            "Description": "flagged for cleanup",
            "Example": "bool object.flaggedForCleanup"
        },
        "forceOtherVehsToStop": {
            "Description": "should other vehicles be forced to stop for this one",
            "Example": "bool object.forceOtherVehsToStop"
        },
        "fullThrottleActive": {
            "Description": "Is the Full Throttle effect being applied to this vehicle",
            "Example": "bool object.fullThrottleActive"
        },
        "fullThrottleEndTime": {
            "Description": "Network time that Full Throttle will end",
            "Example": "int object.fullThrottleEndTime"
        },
        "ghost": {
            "Example": "bool object.ghost"
        },
        "handBrakeOn": {
            "Description": "indicates whether the hand brake is on",
            "Example": "bool object.handBrakeOn"
        },
        "hasBeenOwnedByPlayer": {
            "Example": "bool object.hasBeenOwnedByPlayer"
        },
        "hasLastDriver": {
            "Example": "bool object.hasLastDriver"
        },
        "hasTimedExplosion": {
            "Description": "is there a timed explosive on this vehicle",
            "Example": "bool object.hasTimedExplosion"
        },
        "headlightsFullBeamOn": {
            "Description": "headlights full beam on",
            "Example": "bool object.headlightsFullBeamOn"
        },
        "influenceWantedLevel": {
            "Example": "bool object.influenceWantedLevel"
        },
        "isDriveable": {
            "Description": "is this vehicle drivable?",
            "Example": "bool object.isDriveable"
        },
        "isParked": {
            "Description": "is this a parked car",
            "Example": "bool object.isParked"
        },
        "isStationary": {
            "Description": "is this a stationary car",
            "Example": "bool object.isStationary"
        },
        "isTrailerAttachmentEnabled": {
            "Description": "Script can disable trailers from attaching themselves",
            "Example": "bool object.isTrailerAttachmentEnabled"
        },
        "junctionArrivalTime": {
            "Description": "Time that the vehicle arrived at its current junction",
            "Example": "int object.junctionArrivalTime"
        },
        "junctionCommand": {
            "Description": "Traffic flow command (stop, go)",
            "Example": "int object.junctionCommand"
        },
        "lastDriverPedID": {
            "Example": "int object.lastDriverPedID"
        },
        "lightsOn": {
            "Description": "lights on",
            "Example": "bool object.lightsOn"
        },
        "mercVeh": {
            "Example": "bool object.mercVeh"
        },
        "moveAwayFromPlayer": {
            "Description": "should this veh move away from the player",
            "Example": "bool object.moveAwayFromPlayer"
        },
        "noDamageFromExplosionsOwnedByDriver": {
            "Example": "bool object.noDamageFromExplosionsOwnedByDriver"
        },
        "overridelights": {
            "Example": "int object.overridelights"
        },
        "placeOnRoadQueued": {
            "Example": "bool object.placeOnRoadQueued"
        },
        "planeResistToExplosion": {
            "Example": "bool object.planeResistToExplosion"
        },
        "pretendOccupants": {
            "Description": "does this vehicle have pretend occupants",
            "Example": "bool object.pretendOccupants"
        },
        "radioStation": {
            "Description": "current radio station",
            "Example": "int object.radioStation"
        },
        "radioStationChangedByDriver": {
            "Description": "driver changed current radio station",
            "Example": "bool object.radioStationChangedByDriver"
        },
        "removeWithEmptyCopOrWreckedVehs": {
            "Description": "consider this veh with cop/wrecked vehs for removal purposes",
            "Example": "bool object.removeWithEmptyCopOrWreckedVehs"
        },
        "roofLowered": {
            "Description": "set when a convertible has the roof open",
            "Example": "bool object.roofLowered"
        },
        "runningRespotTimer": {
            "Description": "is this vehicle running the car respot timer",
            "Example": "bool object.runningRespotTimer"
        },
        "scriptSetHandbrakeOn": {
            "Description": "indicates whether script has specified the handbrake is on this vehicle (included in vehicle game state to ensure goes with handbrake state)",
            "Example": "bool object.scriptSetHandbrakeOn"
        },
        "sirenOn": {
            "Description": "is this vehicle's siren currently on?",
            "Example": "bool object.sirenOn"
        },
        "timedExplosionCulprit": {
            "Description": "entity responsible for the timed explosion",
            "Example": "int object.timedExplosionCulprit"
        },
        "timedExplosionTime": {
            "Description": "network time at which the timed explosion is to occur",
            "Example": "int object.timedExplosionTime"
        },
        "usePlayerLightSettings": {
            "Example": "bool object.usePlayerLightSettings"
        },
        "useRespotEffect": {
            "Example": "bool object.useRespotEffect"
        },
        "vehicleOccupantsTakeExplosiveDamage": {
            "Example": "bool object.vehicleOccupantsTakeExplosiveDamage"
        },
        "windowsDown": {
            "Description": "windows down state",
            "Example": "int object.windowsDown"
        },
        "xenonLightColor": {
            "Example": "int object.xenonLightColor"
        }
    },
    "CVehicleHealthDataNode": {
        "bodyhealth": {
            "Description": "body health",
            "Example": "int object.bodyhealth"
        },
        "extinguishedFireCount": {
            "Example": "int object.extinguishedFireCount"
        },
        "fixedCount": {
            "Description": "counter that is sync'd to trigger remote fix of vehicle when local fix of vehicle happens",
            "Example": "int object.fixedCount"
        },
        "hasDamageEntity": {
            "Description": "has this vehicle been damaged by another entity?",
            "Example": "bool object.hasDamageEntity"
        },
        "hasMaxHealth": {
            "Description": "health is max",
            "Example": "bool object.hasMaxHealth"
        },
        "health": {
            "Description": "health",
            "Example": "int object.health"
        },
        "healthsame": {
            "Description": "if the health is the same as body health",
            "Example": "bool object.healthsame"
        },
        "isBlownUp": {
            "Description": "was the vehicle wrecked by explosion?",
            "Example": "bool object.isBlownUp"
        },
        "isWrecked": {
            "Description": "is this vehicle wrecked?",
            "Example": "bool object.isWrecked"
        },
        "lastDamagedMaterialId": {
            "Description": "last material id that was damaged for vehicle",
            "Example": "int object.lastDamagedMaterialId"
        },
        "numWheels": {
            "Description": "number of wheels on this car",
            "Example": "int object.numWheels"
        },
        "packedEngineHealth": {
            "Description": "packed engine health value",
            "Example": "int object.packedEngineHealth"
        },
        "packedPetrolTankHealth": {
            "Description": "packed petrol tank health value",
            "Example": "int object.packedPetrolTankHealth"
        },
        "suspensionHealth": {
            "Description": "the health of the suspension for the wheels",
            "Example": "table<int, number> object.suspensionHealth"
        },
        "suspensionHealthDefault": {
            "Description": "is the suspension health for all wheels at the default",
            "Example": "bool object.suspensionHealthDefault"
        },
        "tyreBrokenOff": {
            "Example": "table<int, bool> object.tyreBrokenOff"
        },
        "tyreDamaged": {
            "Description": "indicates which tyres are damaged",
            "Example": "table<int, bool> object.tyreDamaged"
        },
        "tyreDestroyed": {
            "Description": "indicates which tyres are destroyed",
            "Example": "table<int, bool> object.tyreDestroyed"
        },
        "tyreFire": {
            "Example": "table<int, bool> object.tyreFire"
        },
        "tyreHealthDefault": {
            "Description": "is the tyre health for all wheels at the default",
            "Example": "bool object.tyreHealthDefault"
        },
        "tyreWearRate": {
            "Example": "table<int, number> object.tyreWearRate"
        },
        "weaponDamageEntity": {
            "Description": "weapon damage entity (only for script objects???????????????)",
            "Example": "int object.weaponDamageEntity"
        },
        "weaponDamageHash": {
            "Description": "weapon damage Hash",
            "Example": "int object.weaponDamageHash"
        }
    },
    "CVehicleModelInfo": {
        "FromAddress": {
            "Example": "CVehicleModelInfo CVehicleModelInfo.FromAddress(int address)"
        },
        "FromBaseModelInfo": {
            "Example": "CVehicleModelInfo CVehicleModelInfo.FromBaseModelInfo(CModelInfo base)"
        },
        "GetAddress": {
            "Example": "int object:GetAddress()"
        },
        "IsBicycle": {
            "Example": "bool object:IsBicycle()"
        },
        "IsBike": {
            "Example": "bool object:IsBike()"
        },
        "IsBlimp": {
            "Example": "bool object:IsBlimp()"
        },
        "IsBoat": {
            "Example": "bool object:IsBoat()"
        },
        "IsCar": {
            "Example": "bool object:IsCar()"
        },
        "IsHeli": {
            "Example": "bool object:IsHeli()"
        },
        "IsJetski": {
            "Example": "bool object:IsJetski()"
        },
        "IsPlane": {
            "Example": "bool object:IsPlane()"
        },
        "IsQuadbike": {
            "Example": "bool object:IsQuadbike()"
        },
        "IsSubmarine": {
            "Example": "bool object:IsSubmarine()"
        },
        "IsSubmarineCar": {
            "Example": "bool object:IsSubmarineCar()"
        },
        "IsTrailer": {
            "Example": "bool object:IsTrailer()"
        },
        "IsTrain": {
            "Example": "bool object:IsTrain()"
        },
        "IsnAmphibiousCar": {
            "Example": "bool object:IsAmphibiousCar()"
        },
        "IsnAmphibiousQuadbike": {
            "Example": "bool object:IsAmphibiousQuadbike()"
        },
        "Model": {
            "Example": "int object.Model"
        },
        "ModelIndex": {
            "Example": "int object.ModelIndex"
        }
    },
    "CVehicleProximityMigrationDataNode": {
        "PopType": {
            "Description": "population type 0x00F8",
            "Example": "int object.PopType"
        },
        "RespotCounter": {
            "Description": "remaining time from respotting 0x0130",
            "Example": "int object.RespotCounter"
        },
        "SpeedMultiplier": {
            "Description": "speed multiplier (used when calculating cruise speeds) 0x012C",
            "Example": "number object.SpeedMultiplier"
        },
        "hasOccupant": {
            "Description": "does this vehicle have passengers? 0x00C4",
            "Example": "table<int, bool> object.hasOccupant"
        },
        "hasPopType": {
            "Description": "has a population type 0x00F4",
            "Example": "bool object.hasPopType"
        },
        "hasTaskData": {
            "Description": "does the vehicle have any task data to sync 0x0132",
            "Example": "bool object.hasTaskData"
        },
        "isMoving": {
            "Description": "is the vehicle moving (if not pos and vel not sent) 0x0104",
            "Example": "bool object.isMoving"
        },
        "lastDriverTime": {
            "Description": "the last time this vehicle had a driver 0x0100",
            "Example": "int object.lastDriverTime"
        },
        "maxOccupants": {
            "Description": "maximum number of passengers for this vehicle 0x00C0",
            "Example": "int object.maxOccupants"
        },
        "occupantID": {
            "Description": "IDs of the passengers 0x00D4",
            "Example": "table<int, int> object.occupantID"
        },
        "packedVelocityX": {
            "Description": "current velocity X (packed) 0x120",
            "Example": "int object.packedVelocityX"
        },
        "packedVelocityY": {
            "Description": "current velocity Y (packed) 0x124",
            "Example": "int object.packedVelocityY"
        },
        "packedVelocityZ": {
            "Description": "current velocity Z (packed) 0x128",
            "Example": "int object.packedVelocityZ"
        },
        "position": {
            "Description": "current vehicle position 0x110",
            "Example": "V3 object.position"
        },
        "status": {
            "Description": "vehicle status flags 0x00FC",
            "Example": "int object.status"
        },
        "taskMigrationData": {
            "Description": "the migration data of the current AI task 0x013C",
            "Example": "table<int, int> object.taskMigrationData"
        },
        "taskMigrationDataSize": {
            "Description": "the size of the migration data for the current AI task 0x0138",
            "Example": "int object.taskMigrationDataSize"
        },
        "taskType": {
            "Description": "the current AI task type 0x0134",
            "Example": "int object.taskType"
        }
    },
    "CVehicleScriptGameStateDataNode": {
        "AllowSpecialFlightMode": {
            "Example": "bool object.AllowSpecialFlightMode"
        },
        "BombAmmoCount": {
            "Example": "int object.BombAmmoCount"
        },
        "BuoyancyForceMultiplier": {
            "Description": "shows us how much the boat wants to float back up. 0 when the boat is sinking the fastest.",
            "Example": "number object.BuoyancyForceMultiplier"
        },
        "CanEngineMissFire": {
            "Example": "bool object.CanEngineMissFire"
        },
        "CollisionWithMapDamageScale": {
            "Example": "number object.CollisionWithMapDamageScale"
        },
        "CountermeasureAmmoCount": {
            "Example": "int object.CountermeasureAmmoCount"
        },
        "DamageThreshold": {
            "Example": "int object.DamageThreshold"
        },
        "DisableBreaking": {
            "Example": "bool object.DisableBreaking"
        },
        "DisableHoverModeFlight": {
            "Example": "bool object.DisableHoverModeFlight"
        },
        "DisableVericalFlightModeTransition": {
            "Example": "bool object.DisableVericalFlightModeTransition"
        },
        "ExtraBoundAttachAllowance": {
            "Example": "number object.ExtraBoundAttachAllowance"
        },
        "GarageInstanceIndex": {
            "Example": "int object.GarageInstanceIndex"
        },
        "HasOutriggerDeployed": {
            "Example": "bool object.HasOutriggerDeployed"
        },
        "HeliRopeLength": {
            "Example": "number object.HeliRopeLength"
        },
        "InSubmarineMode": {
            "Example": "bool object.InSubmarineMode"
        },
        "IsCarParachuting": {
            "Example": "bool object.IsCarParachuting"
        },
        "PopType": {
            "Example": "int object.PopType"
        },
        "RadioEnabledByScript": {
            "Example": "bool object.RadioEnabledByScript"
        },
        "ScriptForceHd": {
            "Example": "bool object.ScriptForceHd"
        },
        "ScriptMaxSpeed": {
            "Example": "number object.ScriptMaxSpeed"
        },
        "SpecialFlightModeUsed": {
            "Example": "bool object.SpecialFlightModeUsed"
        },
        "TeamLockOverrides": {
            "Example": "int object.TeamLockOverrides"
        },
        "TeamLocks": {
            "Example": "int object.TeamLocks"
        },
        "TransformInstantly": {
            "Example": "bool object.TransformInstantly"
        },
        "UsingAutoPilot": {
            "Example": "bool object.UsingAutoPilot"
        },
        "VehicleProducingSlipstream": {
            "Example": "int object.VehicleProducingSlipstream"
        },
        "bBlockWeaponSelection": {
            "Example": "bool object.bBlockWeaponSelection"
        },
        "bBoatIgnoreLandProbes": {
            "Example": "bool object.bBoatIgnoreLandProbes"
        },
        "bIncreaseWheelCrushDamage": {
            "Example": "bool object.bIncreaseWheelCrushDamage"
        },
        "canPickupEntitiesThatHavePickupDisabled": {
            "Example": "bool object.canPickupEntitiesThatHavePickupDisabled"
        },
        "disableCollisionUponCreation": {
            "Description": "Disable collision for 1 frame upon creation",
            "Example": "bool object.disableCollisionUponCreation"
        },
        "disablePlayerCanStandOnTop": {
            "Example": "bool object.disablePlayerCanStandOnTop"
        },
        "disableRampCarImpactDamage": {
            "Example": "bool object.disableRampCarImpactDamage"
        },
        "fOverrideArriveDistForVehPersuitAttack": {
            "Example": "number object.fOverrideArriveDistForVehPersuitAttack"
        },
        "fRampImpulseScale": {
            "Example": "number object.fRampImpulseScale"
        },
        "fScriptDamageScale": {
            "Example": "number object.fScriptDamageScale"
        },
        "fScriptWeaponDamageScale": {
            "Example": "number object.fScriptWeaponDamageScale"
        },
        "gliderState": {
            "Example": "int object.gliderState"
        },
        "hasHeliRopeLengthSet": {
            "Example": "bool object.hasHeliRopeLengthSet"
        },
        "hasParachuteObject": {
            "Example": "bool object.hasParachuteObject"
        },
        "homingCanLockOnToObjects": {
            "Example": "bool object.homingCanLockOnToObjects"
        },
        "isBeastVehicle": {
            "Example": "bool object.isBeastVehicle"
        },
        "isinair": {
            "Description": "is the vehicle in the air",
            "Example": "bool object.isinair"
        },
        "lockedToXY": {
            "Description": "is this amphibious locked in the XY plane (anchored)",
            "Example": "bool object.lockedToXY"
        },
        "parachuteObjectId": {
            "Example": "int object.parachuteObjectId"
        },
        "parachuteStickX": {
            "Example": "number object.parachuteStickX"
        },
        "parachuteStickY": {
            "Example": "number object.parachuteStickY"
        },
        "restrictedAmmoCount": {
            "Example": "table<int, int> object.restrictedAmmoCount"
        },
        "rocketBoostRechargeRate": {
            "Example": "number object.rocketBoostRechargeRate"
        },
        "tuckInWheelsForQuadBike": {
            "Example": "bool object.tuckInWheelsForQuadBike"
        },
        "vehicleParachuteTintIndex": {
            "Example": "int object.vehicleParachuteTintIndex"
        }
    },
    "CVehicleTaskDataNode": {
        "taskData": {
            "Example": "table<int, int> object.taskData"
        },
        "taskDataSize": {
            "Example": "int object.taskDataSize"
        },
        "taskType": {
            "Example": "int object.taskType"
        }
    },
    "Cherax": {
        "GetAvatarUrl": {
            "Example": "string Cherax.GetAvatarUrl()"
        },
        "GetBuild": {
            "Example": "int Cherax.GetBuild()"
        },
        "GetName": {
            "Example": "string Cherax.GetName()"
        },
        "GetUID": {
            "Example": "int Cherax.GetUID()"
        },
        "GetVersion": {
            "Example": "string Cherax.GetVersion()"
        }
    },
    "ClickGUI": {
        "AddPlayerTab": {
            "Description": "Adds a lua tab to the player options.",
            "Example": "void ClickGUI.AddPlayerTab(string title, function() renderFunc)"
        },
        "AddTab": {
            "Description": "Adds a lua tab to the main gui.",
            "Example": "void ClickGUI.AddTab(string title, function() renderFunc)"
        },
        "BeginCustomChildWindow": {
            "Description": "Begin custom ImgGui Child window. The text alignment range is [0.0 - 1.0]. A value of -1.0 indicates the default value.",
            "Example": "bool ClickGUI.BeginCustomChildWindow(string label, int frames = -1, int textLines = -1, number textAlignX = -1.0, number textAlignY = -1.0)"
        },
        "EndCustomChildWindow": {
            "Description": "End custom ImgGui Child window.",
            "Example": "void ClickGUI.EndCustomChildWindow()"
        },
        "GetActiveMenuTab": {
            "Description": "Get the current open menu tab.",
            "Example": "ClickTab ClickGUI.GetActiveMenuTab()"
        },
        "GetPos": {
            "Description": "Get the current position in screen coordinates.",
            "Example": "number x,y ClickGUI.GetPos()"
        },
        "GetSize": {
            "Description": "Get the current size in screen coordinates.",
            "Example": "number x,y ClickGUI.GetSize()"
        },
        "LoadTheme": {
            "Description": "Loads a Theme by its name.",
            "Example": "bool ClickGUI.LoadTheme(string fileName)\nClickGUI.LoadTheme(\"Default\")"
        },
        "RemovePlayerTab": {
            "Description": "Removes a lua tab from the player options.",
            "Example": "void ClickGUI.RemovePlayerTab(string title)"
        },
        "RemoveTab": {
            "Description": "Removes a lua tab from the main gui.",
            "Example": "void ClickGUI.RemoveTab(string title)"
        },
        "RenderCustomTitleBar": {
            "Description": "Renders a custom title bar.",
            "Example": "void ClickGUI.RenderCustomTitleBar(string title)"
        },
        "RenderFeature": {
            "Description": "Render a feature for the given feature hash and index.",
            "Example": "bool ClickGUI.RenderFeature(int hash)\nbool ClickGUI.RenderFeature(int hash, int index)"
        },
        "SetActiveMenuTab": {
            "Description": "Set the current open menu tab.",
            "Example": "void ClickGUI.SetActiveMenuTab(ClickTab tab)"
        }
    },
    "ClickTab": {
        "LuaEditor": null,
        "LuaTab": null,
        "Miscellaneous": null,
        "NumTabs": null,
        "Player": null,
        "PlayerList": null,
        "Protections": null,
        "Recovery": null,
        "SCAPI": null,
        "Session": null,
        "Settings": null,
        "Spawner": null,
        "Vehicle": null,
        "Weapon": null
    },
    "Curl": {
        "AddHeader": {
            "Description": "Adds the defined header.",
            "Example": "LuaCurl object:AddHeader(string header)"
        },
        "DisableErrorLog": {
            "Description": "Disables the logging of errors.",
            "Example": "LuaCurl object:DisableErrorLog()"
        },
        "Easy": {
            "Description": "Create a new curl object. Never lose this object until you are completely done with it. Never do 'Curl.Easy():Setopt' because this will cause the object to be lost by lua gc.",
            "Example": "LuaCurl Curl.Easy()\ncurlObject = Curl.Easy()\ncurlObject:Setopt(eCurlOption.CURLOPT_URL, \"https://www.google.com/\"):Perform()\n--Peform is an async task so keep the curlObject somewhere where it does not get freed from lua gc."
        },
        "GetFinished": {
            "Description": "Get whether or not the Perform call has finished.",
            "Example": "bool object:GetFinished()"
        },
        "GetResponse": {
            "Description": "Get the response. The response string is only valid when no custom Write Function was used.",
            "Example": "eCurlCode,string object:GetResponse()"
        },
        "Perform": {
            "Description": "Perform the curl operation after set up. Perform is called asynchronously. Call GetFinished() to check the current state.",
            "Example": "void object:Perform()"
        },
        "Setopt": {
            "Description": "Set specific curl options during initialize.",
            "Example": "LuaCurl object:Setopt(eCurlOption option, string str)\nLuaCurl object:Setopt(eCurlOption option, int value)\nLuaCurl object:Setopt(eCurlOption.CURLOPT_URL, \"https://www.google.com/\")"
        }
    },
    "D3D11SRV": null,
    "D3D11Texture": {
        "GetCurrent": {
            "Example": "D3D11SRV object:GetCurrent()"
        },
        "GetFrame": {
            "Description": "The index starts at 0. The max index is (GetFrameCount - 1).",
            "Example": "D3D11SRV object:GetFrame(int index)"
        },
        "GetFrameCount": {
            "Description": "Returns the number of frames in this texture.",
            "Example": "int object:GetFrameCount()"
        },
        "GetHeight": {
            "Description": "Returns the height this texture.",
            "Example": "int object:GetHeight()"
        },
        "GetWidth": {
            "Description": "Returns the width this texture.",
            "Example": "int object:GetWidth()"
        }
    },
    "DatBitBuffer": {
        "ReadBool": {
            "Description": "Reads a bool from the buffer. Format: [value, success]",
            "Example": "bool,bool object:ReadBool()"
        },
        "ReadInt": {
            "Description": "Reads a signed integer from the buffer. Format: [value, success]",
            "Example": "int,bool object:ReadInt(int numBits)"
        },
        "ReadString": {
            "Description": "Reads a zero-terminated string from the buffer. Format: [value, success]",
            "Example": "string,bool object:ReadString(int maxChars)"
        },
        "ReadUns": {
            "Description": "Reads an unsigned integer from the buffer. Format: [value, success]",
            "Example": "int,bool object:ReadUns(int numBits)"
        },
        "Seek": {
            "Description": "Sets the bit position of the cursor. This is the location of the next read/write.",
            "Example": "bool object:SetCursorPos(int pos)"
        }
    },
    "EventMgr": {
        "RegisterHandler": {
            "Description": "Register a handler that will be called for a specific event.",
            "Example": "int EventMgr.RegisterHandler(eLuaEvent event, function func() end)"
        },
        "RemoveHandler": {
            "Description": "Remove a previously registered handler by id.",
            "Example": "void EventMgr.RemoveHandler(int id)"
        }
    },
    "Feature": {
        "AddHotKey": {
            "Description": "Adds a hotkey for the feature and returns itself.",
            "Example": "Feature object:AddHotKey(int keyCode)"
        },
        "AddInfoContentFeature": {
            "Description": "Add an feature as info content for eFeatureType ListWithInfo.",
            "Example": "Feature object:AddInfoContentFeature(int hash)"
        },
        "AddRenderAfter": {
            "Description": "Adds a feature to a list that will be rendered after this feature.",
            "Example": "void object:AddRenderAfter(Feature feature)"
        },
        "AddRenderBefore": {
            "Description": "Adds a feature to a list that will be rendered before this feature.",
            "Example": "void object:AddRenderBefore(Feature feature)"
        },
        "ClearHotkeys": {
            "Description": "Removes all hotkeys for this feature.",
            "Example": "Feature object:ClearHotkeys()"
        },
        "ClearRenderAfter": {
            "Example": "void object:ClearRenderAfter(Feature feature)"
        },
        "ClearRenderBefore": {
            "Example": "void object:ClearRenderBefore(Feature feature)"
        },
        "Desc": {
            "Description": "Description of the feature",
            "Example": "string object.Desc"
        },
        "GetArrayIndex": {
            "Description": "If this feature is part of an feature array, this is the index.",
            "Example": "int object:GetArrayIndex()"
        },
        "GetBoolValue": {
            "Description": "Gets the current boolean value.",
            "Example": "bool object:GetBoolValue()"
        },
        "GetColor": {
            "Description": "Gets the current color in rgba.",
            "Example": "int r, g, b, a object:GetColor()"
        },
        "GetColorFloats": {
            "Description": "Gets the current color in rgba as floats from 0.0 to 1.0 .",
            "Example": "number r, g, b, a object:GetColorFloats()"
        },
        "GetColorU32": {
            "Description": "Gets the current color in packed rgba.",
            "Example": "int object:GetColorU32()"
        },
        "GetDesc": {
            "Description": "Get the description of the feature.",
            "Example": "string object:GetDesc(bool translate = true)"
        },
        "GetFloatLimitValues": {
            "Description": "Returns the minimum and maximum floating value.",
            "Example": "number,number object:GetFloatLimitValues()"
        },
        "GetFloatMaxValue": {
            "Description": "Returns the maximum floating value.",
            "Example": "number object:GetFloatMaxValue()"
        },
        "GetFloatMinValue": {
            "Description": "Returns the minimum floating value.",
            "Example": "number object:GetFloatMinValue()"
        },
        "GetFloatValue": {
            "Description": "Gets the current floating value.",
            "Example": "number object:GetFloatValue()"
        },
        "GetFormat": {
            "Description": "Returns the format used for slider and input values.",
            "Example": "string object:GetFormat()"
        },
        "GetHash": {
            "Example": "int object:GetHash()"
        },
        "GetHotkeys": {
            "Description": "Get all hotkeys for this feature.",
            "Example": "table<int, int> object:GetHotkeys()"
        },
        "GetId": {
            "Description": "Returns the feature id in creation order.",
            "Example": "int object:GetId()"
        },
        "GetIntLimitValues": {
            "Description": "Returns the minimum and maximum integer value.",
            "Example": "int,int object:GetIntLimitValues()"
        },
        "GetIntMaxValue": {
            "Description": "Returns the maximum integer value.",
            "Example": "int object:GetIntMaxValue()"
        },
        "GetIntMinValue": {
            "Description": "Returns the minimum integer value.",
            "Example": "int object:GetIntMinValue()"
        },
        "GetIntValue": {
            "Description": "Gets the current integer value.",
            "Example": "int object:GetIntValue()"
        },
        "GetList": {
            "Description": "Gets the list for feature types like combo.",
            "Example": "table<int, string> object:GetList()"
        },
        "GetListIndex": {
            "Description": "Gets the current list index of the feature.",
            "Example": "int object:GetListIndex()"
        },
        "GetName": {
            "Description": "Get the name of the feature.",
            "Example": "string object:GetName(bool translate = true)"
        },
        "GetPlayerIndex": {
            "Description": "Same as GetArrayIndex but you might prefer this if you are using a player feature.",
            "Example": "int object:GetPlayerIndex()"
        },
        "GetRenderAfter": {
            "Description": "Returns a list of features that will be rendered after this feature.",
            "Example": "table<int, int> object:GetRenderAfter()"
        },
        "GetRenderBefore": {
            "Description": "Returns a list of features that will be rendered before this feature.",
            "Example": "table<int, int> object:GetRenderBefore()"
        },
        "GetStringValue": {
            "Description": "Gets the current string value.",
            "Example": "string object:GetStringValue()"
        },
        "GetType": {
            "Description": "Gets the feature type. E.g eFeatureType.Button",
            "Example": "eFeatureType object:GetType()"
        },
        "IsListIndexToggled": {
            "Description": "Returns whether the list index has been toggled for types like ComboToggles.",
            "Example": "bool object:IsListIndexToggled(int index)"
        },
        "IsSaveable": {
            "Description": "Returns whether the feature should be safed in settings or not..",
            "Example": "bool object:IsSaveable()"
        },
        "IsSearchable": {
            "Description": "Gets whether a feature can be found by search or not.",
            "Example": "bool object:IsSearchable()"
        },
        "IsToggleFeature": {
            "Description": "Returns whether the feature can be toggled or not.",
            "Example": "bool object:IsToggleFeature()"
        },
        "IsToggled": {
            "Description": "Returns whether the feature is currently toggled or not.",
            "Example": "bool object:IsToggled()"
        },
        "IsVisible": {
            "Description": "Returns whether the feature should be shown in the GUI or not.",
            "Example": "bool object:IsVisible()"
        },
        "LoadSettings": {
            "Description": "Load the specific settings for this feature from a file.",
            "Example": "bool object:LoadSettings(string file)\nobject:LoadSettings(\"Default.json\");"
        },
        "Name": {
            "Description": "Name of the feature",
            "Example": "string object.Name"
        },
        "OnClick": {
            "Description": "Triggers the callback as if it would be called from the GUI.",
            "Example": "void object:OnClick()"
        },
        "OnSettingsLoad": {
            "Description": "Triggers the callback as if it would be called from the settings loader.",
            "Example": "void object:OnSettingsLoad()"
        },
        "RegisterCallbackTrigger": {
            "Description": "Registers Callback Trigger for the feature and returns itself.",
            "Example": "Feature object:RegisterCallbackTrigger(eCallbackTrigger flags)"
        },
        "RemoveHotkey": {
            "Description": "Remove specific hotkeys for this feature.",
            "Example": "Feature object:RemoveHotkey(int keyCode, bool all)"
        },
        "RemoveRenderAfter": {
            "Description": "Returns true when at least one feature was removed",
            "Example": "bool object:RemoveRenderAfter(Feature feature)"
        },
        "RemoveRenderBefore": {
            "Description": "Returns true when at least one feature was removed",
            "Example": "bool object:RemoveRenderBefore(Feature feature)"
        },
        "Render": {
            "Description": "Renders the feature in the current context. Return true if rendered.",
            "Example": "bool object:Render()"
        },
        "Reset": {
            "Description": "Restore the current values with the default values.",
            "Example": "Feature object:Reset()"
        },
        "SetBoolValue": {
            "Description": "Sets the current boolean value.",
            "Example": "Feature object:SetBoolValue(bool value)"
        },
        "SetColor": {
            "Description": "Sets the current color value.",
            "Example": "Feature object:SetColor(int r, int g, int b, int a)"
        },
        "SetColorFloats": {
            "Description": "Sets the current color value.",
            "Example": "Feature object:SetColorFloats(number r, number g, number b, number a)"
        },
        "SetColorU32": {
            "Description": "Sets the current color in packed rgba.",
            "Example": "Feature object:SetColorU32(int color)"
        },
        "SetDefaultValue": {
            "Description": "Sets the default feature value and returns itself.",
            "Example": "Feature object:SetDefaultValue(true):SetDefaultValue(1337)\nFeature object:SetDefaultValue(3.33):SetDefaultValue(\"Test\")"
        },
        "SetDesc": {
            "Description": "Set the description of the feature.",
            "Example": "Feature object:SetDesc(string desc)"
        },
        "SetFastStepSize": {
            "Description": "Sets the feature fast step size used in a slider.",
            "Example": "Feature object:SetFastStepSize(5)\nFeature object:SetFastStepSize(0.5)"
        },
        "SetFloatValue": {
            "Description": "Sets the current floating value.",
            "Example": "Feature object:SetFloatValue(number value)"
        },
        "SetFormat": {
            "Description": "Sets the format used for slider and input values.",
            "Example": "object:SetFormat(string fmt)\nobject:SetFormat(\"%X\""
        },
        "SetIntValue": {
            "Description": "Sets the current integer value.",
            "Example": "Feature object:SetIntValue(int value)"
        },
        "SetLimitValues": {
            "Description": "Sets the feature minimum and maximum values and returns itself.",
            "Example": "Feature object:SetLimitValues(20, 40):SetLimitValues(0.5, 2.5)"
        },
        "SetList": {
            "Description": "Sets the list for feature types like combo.",
            "Example": "Feature object:SetList(table<int, string>)"
        },
        "SetListIndex": {
            "Description": "Sets the current list index of the feature.",
            "Example": "Feature object:SetListIndex(int index)"
        },
        "SetMaxValue": {
            "Description": "Sets the feature maximum value and returns itself.",
            "Example": "Feature object:SetMaxValue(20):SetMaxValue(20.1)"
        },
        "SetMinValue": {
            "Description": "Sets the feature minimum value and returns itself.",
            "Example": "Feature object:SetMinValue(20):SetMinValue(20.1)"
        },
        "SetName": {
            "Description": "Set the name of the feature.",
            "Example": "Feature object:SetName(string name)"
        },
        "SetNoCallbackOnPress": {
            "Description": "This disables the callback for OnClick.",
            "Example": "Feature object:SetNoCallbackOnClick(bool disable)"
        },
        "SetNoCallbackOnSettingsLoad": {
            "Description": "This disables the callback for OnSettingsLoad.",
            "Example": "Feature object:SetNoCallbackOnSettingsLoad(bool disable)"
        },
        "SetSaveable": {
            "Description": "Sets whether the feature should be safed in settings or not.",
            "Example": "Feature object:SetSaveable(bool saveable)"
        },
        "SetSearchable": {
            "Description": "Sets whether a feature can be found by search or not.",
            "Example": "Feature object:SetSearchable(bool searchable)"
        },
        "SetStepSize": {
            "Description": "Sets the feature step size used in a slider.",
            "Example": "Feature object:SetStepSize(5)\nFeature object:SetStepSize(0.5)"
        },
        "SetStringValue": {
            "Description": "Sets the current string value.",
            "Example": "Feature object:SetStringValue(string value)"
        },
        "SetValue": {
            "Description": "Sets the current feature value and returns itself.",
            "Example": "Feature object:SetValue(true):SetValue(1337)\nFeature object:SetValue(3.33):SetValue(\"Test\")"
        },
        "SetVisible": {
            "Description": "Sets whether the feature should be shown in the GUI or not.",
            "Example": "Feature object:SetVisible(bool visible)"
        },
        "Toggle": {
            "Description": "Flips the current boolean value of this feature.",
            "Example": "Feature object:Toggle()\nFeature object:Toggle(bool on)"
        },
        "ToggleListIndex": {
            "Description": "Toggles the list index for types like ComboToggles.",
            "Example": "Feature object:ToggleListIndex(int index, bool toggle)"
        },
        "TriggerCallback": {
            "Example": "void object:TriggerCallback()"
        }
    },
    "FeatureMgr": {
        "AddFeature": {
            "Description": "Create and add a new feature to the list.",
            "Example": "Feature FeatureMgr.AddFeature(int hash, string name, eFeatureType type, string desc = , function(Feature) callback = 0, bool nativeThreadExecution = true, bool forceQueue = false)"
        },
        "AddFeatureArray": {
            "Description": "Create and add a new features. Returns list of the created feature hashes.",
            "Example": "table<int, int> FeatureMgr.AddFeatureArray(int size, int hash, string name, eFeatureType type, string desc = ,function(Feature) callback = 0, bool nativeThreadExecution = true, bool forceQueue = false)"
        },
        "AddPlayerFeature": {
            "Description": "Creates an array of 32 features which will automatically reset when the player leaves.",
            "Example": "table<int, int> FeatureMgr.AddPlayerFeature(int hash, string name, eFeatureType type, string desc = , function(Feature) callback = 0, bool nativeThreadExecution = true, bool forceQueue = false)"
        },
        "GetAllFeatureHashes": {
            "Description": "Returns all feaure hashes.",
            "Example": "table<int, int> FeatureMgr.GetAllFeatureHashes()"
        },
        "GetAllFeatures": {
            "Description": "Returns all feaures.",
            "Example": "table<int, Feature> FeatureMgr.GetAllFeatures()"
        },
        "GetAllPlayerFeatureHashes": {
            "Description": "Returns all player feaure hashes.",
            "Example": "table<int, int> FeatureMgr.GetAllPlayerFeatureHashes()"
        },
        "GetCurrentFeatureListString": {
            "Description": "Returns the string value of the current feature list index.",
            "Example": "string FeatureMgr.GetCurrentFeatureListString(int hash)\nstring FeatureMgr.GetCurrentFeatureListString(int hash, int index)"
        },
        "GetFeature": {
            "Description": "Returns a feature by hash.",
            "Example": "Feature FeatureMgr.GetFeature(int hash)\nFeature FeatureMgr.GetFeature(int hash, int index)"
        },
        "GetFeatureByName": {
            "Description": "Returns a feature by name.",
            "Example": "Feature FeatureMgr.GetFeatureByName(string name)\nFeature FeatureMgr.GetFeatureByName(string name, int index)"
        },
        "GetFeatureColor": {
            "Description": "Returns the color value of the feature.",
            "Example": "int r, g, b, a FeatureMgr.GetFeatureColor(int hash)\nint r, g, b, a FeatureMgr.GetFeatureColor(int hash, int index)"
        },
        "GetFeatureFloat": {
            "Description": "Returns the float value of the feature.",
            "Example": "number FeatureMgr.GetFeatureFloat(int hash)\nnumber FeatureMgr.GetFeatureFloat(int hash, int index)"
        },
        "GetFeatureInt": {
            "Description": "Returns the int value of the feature.",
            "Example": "int FeatureMgr.GetFeatureInt(int hash)\nint FeatureMgr.GetFeatureInt(int hash, int index)"
        },
        "GetFeatureList": {
            "Description": "Returns all string items of the feature list.",
            "Example": "table<int, string> FeatureMgr.GetFeatureList(int hash)\ntable<int, string> FeatureMgr.GetFeatureList(int hash, int index)"
        },
        "GetFeatureListIndex": {
            "Description": "Returns the current index of the feature list.",
            "Example": "int FeatureMgr.GetFeatureListIndex(int hash)\nint FeatureMgr.GetFeatureListIndex(int hash, int index)"
        },
        "GetFeatureString": {
            "Description": "Returns the string value of the feature.",
            "Example": "string FeatureMgr.GetFeatureString(int hash)\nstring FeatureMgr.GetFeatureString(int hash, int index)"
        },
        "GetFocusedFeature": {
            "Description": "Returns the current focused(ClickGui) / selected(ListGui) feature.",
            "Example": "Feature FeatureMgr.GetFocusedFeature()"
        },
        "GetHoveredFeature": {
            "Description": "Returns the current hovered(ClickGui) / selected(ListGui) feature.",
            "Example": "Feature FeatureMgr.GetHoveredFeature()"
        },
        "IsFeatureEnabled": {
            "Description": "Returns the boolean value of the feature.",
            "Example": "bool FeatureMgr.IsFeatureEnabled(int hash)\nbool FeatureMgr.IsFeatureEnabled(int hash, int index)"
        },
        "IsFeatureToggled": {
            "Description": "Returns if the feature is toggled.",
            "Example": "bool FeatureMgr.IsFeatureToggled(int hash)\nbool FeatureMgr.IsFeatureToggled(int hash, int index)"
        },
        "LoadSettings": {
            "Description": "Loads the given settings. File can be relative or absolute.",
            "Example": "bool FeatureMgr.LoadSettings(string file)\nFeatureMgr.LoadSettings(\"Default.json\")"
        },
        "RemoveFeature": {
            "Description": "Removes the feature for the given hash.",
            "Example": "bool FeatureMgr.RemoveFeature(int hash)"
        },
        "RemoveFeatureArray": {
            "Description": "Removes the feature array for the given hash and size.",
            "Example": "bool FeatureMgr.RemoveFeatureArray(int hash, int size)"
        },
        "RemovePlayerFeature": {
            "Description": "Removes the player feature for the given hash.",
            "Example": "bool FeatureMgr.RemovePlayerFeature(int hash)"
        },
        "ResetAllPlayerFeatures": {
            "Description": "Resets all player features for every player.",
            "Example": "void FeatureMgr.ResetAllPlayerFeatures()"
        },
        "ResetFeature": {
            "Description": "Restore the current values with the default values of the feature.",
            "Example": "void FeatureMgr.ResetFeature(int hash)\nvoid FeatureMgr.ResetFeature(int hash, int index)"
        },
        "ResetPlayerFeatures": {
            "Description": "Resets all player features for given player id.",
            "Example": "void FeatureMgr.ResetPlayerFeatures(int playerIndex)"
        },
        "SearchFeature": {
            "Description": "Searches the best matching features for a given result. Uses translations for results. You should cache results whenever input changes. Expensive execution time.",
            "Example": "table<int, int> FeatureMgr.SearchFeature(string input, int maxResults, number cutoffPercent)"
        },
        "SetFeatureColor": {
            "Description": "Sets the color value of the feature.",
            "Example": "void FeatureMgr.SetFeatureColor(int hash, int r, int g, int b, int a)\nvoid FeatureMgr.SetFeatureColor(int hash, int index, int r, int g, int b, int a)"
        },
        "SetFeatureFloat": {
            "Description": "Sets the float value of the feature.",
            "Example": "void FeatureMgr.SetFeatureFloat(int hash, number value)\nvoid FeatureMgr.SetFeatureFloat(int hash, int index, number value)"
        },
        "SetFeatureInt": {
            "Description": "Sets the int value of the feature.",
            "Example": "void FeatureMgr.SetFeatureInt(int hash, int value)\nvoid FeatureMgr.SetFeatureInt(int hash, int index, int value)"
        },
        "SetFeatureListIndex": {
            "Description": "Sets the current index of the feature list.",
            "Example": "void FeatureMgr.SetFeatureListIndex(int hash, int listIndex)\nvoid FeatureMgr.SetFeatureListIndex(int hash, int index, int listIndex)"
        },
        "SetFeatureString": {
            "Description": "Sets the string value of the feature.",
            "Example": "void FeatureMgr.SetFeatureString(int hash, string value)\nvoid FeatureMgr.SetFeatureString(int hash, int index, string value)"
        },
        "ToggleFeature": {
            "Description": "Flips the current boolean value of the feature.",
            "Example": "void FeatureMgr.ToggleFeature(int hash)\nvoid FeatureMgr.ToggleFeature(int hash, int index)"
        },
        "TriggerFeatureCallback": {
            "Example": "void FeatureMgr.TriggerFeatureCallback(int hash)\nvoid FeatureMgr.TriggerFeatureCallback(int hash, int index)"
        }
    },
    "FileMgr": {
        "CreateDir": {
            "Description": "Ensures that the given path is a directory.",
            "Example": "bool FileMgr.CreateDir(string path)"
        },
        "DeleteFile": {
            "Description": "Deletes the given file using an absolute path.",
            "Example": "void FileMgr.DeleteFile(string path)"
        },
        "DoesFileExist": {
            "Description": "Check whether the file exist using an absolute path.",
            "Example": "bool FileMgr.DoesFileExist(string path)"
        },
        "FindFiles": {
            "Description": "Returns a list of all found files.",
            "Example": "table<int,string> FileMgr.FindFiles(string path, string extension, bool recursive)"
        },
        "GetMenuRootPath": {
            "Description": "Returns the root directory of the menu.",
            "Example": "string FileMgr.GetMenuRootPath()"
        },
        "ReadFileContent": {
            "Description": "Reads the file content using an absolute path.",
            "Example": "string FileMgr.ReadFileContent(string path)"
        },
        "Unzip": {
            "Description": "Extract a .zip file to a given directory.",
            "Example": "bool FileMgr.Unzip(string zipName, string dir)"
        },
        "WriteFileContent": {
            "Description": "Writes the given content to a file using an absolute path.",
            "Example": "bool FileMgr.WriteFileContent(string path, string content, bool append = false)"
        }
    },
    "GTA": {
        "AddChatMessageToPool": {
            "Description": "Adds a chat message locally on your pc only. You can specify the sender of the message. The message has a max length of 255 characters.",
            "Example": "void GTA.AddChatMessageToPool(int playerId, string message, bool team)"
        },
        "BasketAddItem": {
            "Description": "Adds an item to the Basket Transaction.",
            "Example": "bool GTA.BasketAddItem(table<int, int>)"
        },
        "BasketStart": {
            "Description": "Initializes a Basket Transaction.",
            "Example": "bool valid, int transactionId GTA.BasketStart(int category, int action, int flags)"
        },
        "BeginService": {
            "Description": "Initializes a new Service Transaction.",
            "Example": "bool valid, int transactionId GTA.BeginService(int type, int category, int service, int action, int price, int flags)"
        },
        "CheckoutStart": {
            "Description": "Starts the checkout of a transaction. Should be used for services and baskets.",
            "Example": "bool GTA.CheckoutStart(int transactionId)"
        },
        "ConvertSectorToWorldPosition": {
            "Description": "Converts the sector pos to world cords.",
            "Example": "V3 GTA.ConvertSectorToWorldPosition(V3 sectorIn, V3 relativePos)"
        },
        "ConvertWorldToSectorPosition": {
            "Description": "Converts the world pos to sector and relative position. This is being used in sync data nodes to sync the actual position of entities. ",
            "Example": "V3,V3 GTA.ConvertWorldToSectorPosition(V3 pos)"
        },
        "CreateObject": {
            "Description": "Spawns an object. Should only be executed in a native thread.",
            "Example": "int GTA.CreateObject(int hash, float x, float y, float z, bool dynamic, bool isNetworked = true)\nint GTA.CreateObject(string model, float x, float y, float z, bool dynamic, bool isNetworked = true)"
        },
        "CreatePed": {
            "Description": "Spawns a ped. Should only be executed in a native thread.",
            "Example": "int GTA.CreatePed(int hash, int pedType, float x, float y, float z, number heading, bool isNetworked = true, bool autoCleanup = true)\nint GTA.CreatePed(string model, int pedType, float x, float y, float z, number heading, bool isNetworked = true, bool autoCleanup = true)"
        },
        "CreateRandomPed": {
            "Description": "Creates a random ped. Should only be executed in a native thread.",
            "Example": "int GTA.CreateRandomPed(float x, float y, float z)"
        },
        "CreateWorldObject": {
            "Description": "Spawns an world object using a bypass. Should only be executed in a native thread.",
            "Example": "int GTA.CreateWorldObject(int hash, float x, float y, float z, bool dynamic, bool isNetworked = true)\nint GTA.CreateWorldObject(string model, float x, float y, float z, bool dynamic, bool isNetworked = true)"
        },
        "DrawPedPreview": {
            "Description": "Renders a given CPed on the frontend.",
            "Example": "void GTA.DrawPedPreview(CPed ped, v2 relativeScreen, float distance, float pitch, float yaw, float lightning)\nGTA.DrawPedPreview(pPed, v2.new(0.5, 0.5), -4.0, 0.0, 0.0, 1.0)"
        },
        "ForceScriptHost": {
            "Description": "Forces yourself to script host of the given script.",
            "Example": "void GTA.ForceScriptHost(int scriptHash)"
        },
        "GetBonePos2D": {
            "Description": "Does the same as GetBonePos3D and then converts them to normalized screen coordinates.",
            "Example": "V2 GTA.GetBonePos2D(CPed ped, int wMask)"
        },
        "GetBonePos3D": {
            "Description": "Gets the bone world position based on the specified ped and mask.",
            "Example": "V3 GTA.GetBonePos3D(CPed ped, int wMask)"
        },
        "GetDisplayNameFromHash": {
            "Description": "Returns the display name of a specific hash.",
            "Example": "string GTA.GetDisplayNameFromHash(int hash)"
        },
        "GetGroundZ": {
            "Description": "Returns whether the ground was found and the Z coordinate it was found at.",
            "Example": "bool, number GTA.GetGroundZ(number x, number y)"
        },
        "GetLabelText": {
            "Description": "Returns a specific label for a given text entry.",
            "Example": "string GTA.GetLabelText(string str)\nstring GTA.GetLabelText(int hashCode)"
        },
        "GetLocalPed": {
            "Description": "Returns the local player CPed. Might be nil.",
            "Example": "CPed GTA.GetLocalPed()"
        },
        "GetLocalPlayerId": {
            "Description": "Returns the local player id.",
            "Example": "int GTA.GetLocalPlayerId()"
        },
        "GetLocalVehicle": {
            "Description": "Returns the local player's current CVehicle. Might be nil.",
            "Example": "CVehicle GTA.GetLocalVehicle()"
        },
        "GetModelInfoFromHash": {
            "Description": "Returns Model Info by hash. Returns nil if no CBaseModelInfo found.",
            "Example": "CBaseModelInfo GTA.GetModelInfoFromHash(int hash)"
        },
        "GetModelInfoFromIndex": {
            "Description": "Returns Model Info by index. Returns nil if no CBaseModelInfo found.",
            "Example": "CBaseModelInfo GTA.GetModelInfoFromIndex(int index)"
        },
        "GetModelInfoIndexFromHash": {
            "Description": "Returns Model Info Index by hash. Returns -1 if invalid.",
            "Example": "int GTA.GetModelInfoIndexFromHash(int hash)"
        },
        "GetModelNameFromHash": {
            "Description": "Returns the model name of the model hash.",
            "Example": "string GTA.GetModelNameFromHash(int hash)"
        },
        "GetScriptEventName": {
            "Description": "Returns sucess and the name.",
            "Example": "bool, string GTA.GetScriptEventName(int scriptEvent)"
        },
        "GiveControl": {
            "Description": "Force another player take control of the given entity.",
            "Example": "void GTA.GiveControl(int playerId, int iEntity)"
        },
        "GiveScriptHost": {
            "Description": "Give a sepcific player script host of the given script.",
            "Example": "void GTA.GiveScriptHost(int playerId, int scriptHash)"
        },
        "HandleToPointer": {
            "Description": "Converts an entity handle into a CPhysical pointer.",
            "Example": "CPhysical GTA.HandleToPointer(int handle)"
        },
        "PointerToHandle": {
            "Description": "Converts a CPhysical pointer into an entity handle.",
            "Example": "int GTA.PointerToHandle(CPhysical ptr)"
        },
        "RegisterFile": {
            "Description": "Registers the given file for the game so it can be used by natives.",
            "Example": "bool GTA.RegisterFile(string path)\nGTA.RegisterFile(path .. \"MyAssets.ytd\")\nGRAPHICS.REQUEST_STREAMED_TEXTURE_DICT(\"MyAssets\")"
        },
        "RemoveLabelText": {
            "Example": "void GTA.RemoveLabelText(string label)\nGTA.RemoveLabelText(\"LOADING_MPLAYER_L\")"
        },
        "SendChatMessageToEveryone": {
            "Description": "Sends a chat message to every player in the session. Note: You won't see that message yourself unless you manually add it to the chat pool. The message has a max length of 255 characters.",
            "Example": "void GTA.SendChatMessageToEveryone(string message, bool team)"
        },
        "SendChatMessageToPlayer": {
            "Description": "Sends a chat message to a given player in the session. Note: You won't see that message yourself unless you manually add it to the chat pool. The message has a max length of 255 characters.",
            "Example": "void GTA.SendChatMessageToPlayer(int playerId, string message, bool team)"
        },
        "SetLabelText": {
            "Description": "Overwrites the text for a specifc label which is being used by the game.",
            "Example": "void GTA.SetLabelText(string label, string text)\nGTA.SetLabelText(\"LOADING_MPLAYER_L\", \"Loading GTA Online with Cherax\")"
        },
        "SpawnVehicle": {
            "Description": "Should only be executed in a native thread.",
            "Example": "int GTA.SpawnVehicle(int hash, float x, float y, float z, number heading, bool isNetworked = true, bool autoCleanup = true)\nint GTA.SpawnVehicle(string model, float x, float y, float z, number heading, bool isNetworked = true, bool autoCleanup = true)"
        },
        "SpawnVehicleForPlayer": {
            "Description": "Spawns a vehicle in front of the given player. Should only be executed in a native thread.",
            "Example": "int GTA.SpawnVehicleForPlayer(int hash, int player, number forward = 5.0)\nint GTA.SpawnVehicleForPlayer(string model, int player, number forward = 5.0)"
        },
        "TriggerScriptEvent": {
            "Description": "Triggers a script event for given player(s).",
            "Example": "int GTA.TriggerScriptEvent(int bitflags, table<int, int> arguments)\nint GTA.TriggerScriptEvent(int bitflags, variadic_args arguments)\n"
        },
        "WorldToScreen": {
            "Description": "Converts a 3D world position to a 2D normalized screen position. To get the actual screen coordinates multiply them with the screen size.",
            "Example": "float, float GTA.WorldToScreen(float x, y, z)\n"
        }
    },
    "GUI": {
        "AddToast": {
            "Description": "Creates a toast notification.",
            "Example": "bool GUI.AddToast(string title, string text, int duration, eToastPos pos)"
        },
        "GetCurrentRenderMode": {
            "Description": "Returns which GUI Mode is currently rendering. Usefull when Both GUIs are rendering in the same frame.",
            "Example": "eGuiMode GUI.GetCurrentRenderMode()"
        },
        "GetMode": {
            "Description": "Returns the current GUI mode.",
            "Example": "eGuiMode GUI.GetMode()"
        },
        "IsOpen": {
            "Description": "Returns whether the GUI is open or not.",
            "Example": "bool GUI.IsOpen()"
        },
        "SetMode": {
            "Description": "Sets the current GUI Mode",
            "Example": "void GUI.SetMode(eGuiMode mode)"
        },
        "Toggle": {
            "Description": "Toggle the GUI.",
            "Example": "void GUI.Toggle()"
        }
    },
    "GadgetData": {
        "Data": {
            "Example": "table<int, int> object.Data"
        },
        "Type": {
            "Example": "int object.int32_t Type"
        }
    },
    "GamerHandle": {
        "IsValid": {
            "Description": "Returns true if the GamerHandle is valid.",
            "Example": "bool object:IsValid()"
        },
        "New": {
            "Description": "Create a new GamerHandle object.",
            "Example": "GamerHandle GamerHandle()\nGamerHandle GamerHandle.New(int rockstarId)"
        },
        "Platform": null,
        "RockstarId": null,
        "ToBuffer": {
            "Description": "Converts the GamerHandle into a GamerHandleBuffer used by most natives.",
            "Example": "GamerHandleBuffer object:ToBuffer()"
        },
        "UNK1": null
    },
    "GamerHandleBuffer": {
        "GetBuffer": {
            "Description": "Returns the buffer address.",
            "Example": "int object:GetBuffer()"
        },
        "GetSize": {
            "Description": "Returns the size of the GamerHandleBuffer.",
            "Example": "int object:GetSize()"
        },
        "New": {
            "Description": "Create a new GamerHandleBuffer object.",
            "Example": "GamerHandleBuffer GamerHandleBuffer.New()"
        },
        "ToHandle": {
            "Description": "Converts the GamerHandleBuffer into a GamerHandle.",
            "Example": "GamerHandle object:ToHandle()"
        }
    },
    "GamerInfo": {
        "HostKey": null,
        "Name": null,
        "RockstarId": null
    },
    "HotKeyMgr": {
        "AddHotkey": {
            "Description": "Adds a new hotkey for a feature.",
            "Example": "void HotKeyMgr.AddHotkey(int hash, int key)"
        },
        "GetAllHotkeys": {
            "Description": "Returns all hotkeys and their associated feature hash.",
            "Example": "table<int, table<int, int>> HotKeyMgr.GetAllHotkeys()"
        },
        "GetHotKeys": {
            "Description": "Returns all hotkeys for a specific feature hash.",
            "Example": " table<int, int> HotKeyMgr.GetHotKeys(int hash)"
        },
        "RemoveHotkey": {
            "Description": "Removes specific hotkey from an feature.",
            "Example": " void HotKeyMgr.RemoveHotkey(int hash, int key)"
        }
    },
    "ImGui": {
        "AddCircle": {
            "Example": "void ImGui.AddCircle(number x, number y, number radius, int r, int g, int b, int a, int numSegments = 0, number thickness = 1.0)"
        },
        "AddCircleFilled": {
            "Example": "void ImGui.AddCircleFilled(number x, number y, number radius, int r, int g, int b, int a, int numSegments = 0)"
        },
        "AddImage": {
            "Description": "min and max represent the upper-left and lower-right corners of the rectangle.\nuv_min and uv_max represent the normalized texture coordinates to use for those corners. Using (0,0)->(1,1) texture coordinates will generally display the entire texture.",
            "Example": "void ImGui.AddImage(D3D11SRV texture, number min_x, number min_y, number max_x, number max_y, number uv_min_x = 0.0, number uv_min_y = 0.0, number uv_max_x = 1.0, number uv_max_y = 1.0, int color = 255 << 24 | 255 << 16 | 255 << 8 | 255)"
        },
        "AddImageQuad": {
            "Example": "void ImGui.AddImageQuad(D3D11SRV texture, V2 p1, V2 p2, V2 p3, V2 p4, V2 uv1 = Vector2.New(0.0, 0.0), V2 uv2 = Vector2.New(1.0, 0.0), V2 uv3 = Vector2.New(1.0, 1.0), V2 uv4 = Vector2.New(0.0, 1.0), int alpha = 255)"
        },
        "AddImageRotated": {
            "Example": "void ImGui.AddImageRotated(D3D11SRV texture, number center_x, number center_y, number width, number height, number angle, int alpha = 255)"
        },
        "AddImageRounded": {
            "Description": "Same as AddImage with rounding.",
            "Example": "void ImGui.AddImageRounded(D3D11SRV texture, number min_x, number min_y, number max_x, number max_y, number uv_min_x = 0.0, number uv_min_y = 0.0, number uv_max_x = 1.0, number uv_max_y = 1.0, int color = 255 << 24 | 255 << 16 | 255 << 8 | 255, number rounding = 16.0)"
        },
        "AddLine": {
            "Example": "void ImGui.AddLine(number x1, number y1, number x2, number y2, int r, int g, int b, int a, number thickness = 1.0)"
        },
        "AddRect": {
            "Example": "void ImGui.AddRect(number x1, number y1, number x2, number y2, int r, int g, int b, int a, number rounding = 1.0, int drawFlags = 0, number thickness = 1.0)"
        },
        "AddRectFilled": {
            "Example": "void ImGui.AddRectFilled(number x1, number y1, number x2, number y2, int r, int g, int b, int a, number rounding = 1.0, int drawFlags = 0)"
        },
        "AddRectFilledMultiColor": {
            "Example": "void ImGui.AddRectFilledMultiColor(number x1, number y1, number x2, number y2, int col_upr_left, int col_upr_right, int col_bot_right, int col_bot_left)\nImGui.AddRectFilledMultiColor(0, 0, 100, 100, ColorConvertRGBAToU32({255, 255, 255, 255}), ColorConvertRGBAToU32({255, 255, 255, 255}), ColorConvertRGBAToU32({0, 0, 0, 255}), ColorConvertRGBAToU32({0, 0, 0, 255}))"
        },
        "AddText": {
            "Example": "void ImGui.AddText(number x, number y, strig text, int r, int g, int b, int a)"
        },
        "AddTriangle": {
            "Example": "void ImGui.AddTriangle(number x1, number y1, number x2, number y2, number x3, number y3, int r, int g, int b, int a, number thickness = 1.0)"
        },
        "AddTriangleFilled": {
            "Example": "void ImGui.AddTriangleFilled(number x1, number y1, number x2, number y2, number x3, number y3, int r, int g, int b, int a)"
        },
        "AlignTextToFramePadding": null,
        "ArrowButton": null,
        "Begin": null,
        "BeginChild": null,
        "BeginChildFrame": null,
        "BeginCombo": null,
        "BeginGroup": null,
        "BeginMainMenuBar": null,
        "BeginMenu": null,
        "BeginMenuBar": null,
        "BeginPopup": null,
        "BeginPopupContextItem": null,
        "BeginPopupContextVoid": null,
        "BeginPopupContextWindow": null,
        "BeginPopupModal": null,
        "BeginTabBar": null,
        "BeginTabItem": null,
        "BeginTable": {
            "Example": "bool ImGui.BeginTable(string strId, int columns, ImGuiTableFlags flags)"
        },
        "BeginTooltip": null,
        "BgAddCircle": {
            "Example": "void ImGui.BgAddCircle(number x, number y, number radius, int r, int g, int b, int a, int numSegments = 0, number thickness = 1.0)"
        },
        "BgAddCircleFilled": {
            "Example": "void ImGui.BgAddCircleFilled(number x, number y, number radius, int r, int g, int b, int a, int numSegments = 0)"
        },
        "BgAddImage": {
            "Description": "min and max represent the upper-left and lower-right corners of the rectangle.\nuv_min and uv_max represent the normalized texture coordinates to use for those corners. Using (0,0)->(1,1) texture coordinates will generally display the entire texture.",
            "Example": "void ImGui.BgAddImage(D3D11SRV texture, number min_x, number min_y, number max_x, number max_y, number uv_min_x = 0.0, number uv_min_y = 0.0, number uv_max_x = 1.0, number uv_max_y = 1.0, int color = 255 << 24 | 255 << 16 | 255 << 8 | 255)"
        },
        "BgAddImageQuad": {
            "Example": "void ImGui.BgAddImageQuad(D3D11SRV texture, V2 p1, V2 p2, V2 p3, V2 p4, V2 uv1 = Vector2.New(0.0, 0.0), V2 uv2 = Vector2.New(1.0, 0.0), V2 uv3 = Vector2.New(1.0, 1.0), V2 uv4 = Vector2.New(0.0, 1.0), int alpha = 255)"
        },
        "BgAddImageRotated": {
            "Example": "void ImGui.BgAddImageRotated(D3D11SRV texture, number center_x, number center_y, number width, number height, number angle, int alpha = 255)"
        },
        "BgAddImageRounded": {
            "Description": "Same as AddImage with rounding.",
            "Example": "void ImGui.BgAddImageRounded(D3D11SRV texture, number min_x, number min_y, number max_x, number max_y, number uv_min_x = 0.0, number uv_min_y = 0.0, number uv_max_x = 1.0, number uv_max_y = 1.0, int color = 255 << 24 | 255 << 16 | 255 << 8 | 255, number rounding = 16.0)"
        },
        "BgAddLine": {
            "Example": "void ImGui.BgAddLine(number x1, number y1, number x2, number y2, int r, int g, int b, int a, number thickness = 1.0)"
        },
        "BgAddRect": {
            "Example": "void ImGui.BgAddRect(number x1, number y1, number x2, number y2, int r, int g, int b, int a, number rounding = 1.0, int drawFlags = 0, number thickness = 1.0)"
        },
        "BgAddRectFilled": {
            "Example": "void ImGui.BgAddRectFilled(number x1, number y1, number x2, number y2, int r, int g, int b, int a, number rounding = 1.0, int drawFlags = 0)"
        },
        "BgAddRectFilledMultiColor": {
            "Example": "void ImGui.BgAddRectFilledMultiColor(number x1, number y1, number x2, number y2, int col_upr_left, int col_upr_right, int col_bot_right, int col_bot_left)\nImGui.BgAddRectFilledMultiColor(0, 0, 100, 100, ColorConvertRGBAToU32({255, 255, 255, 255}), ColorConvertRGBAToU32({255, 255, 255, 255}), ColorConvertRGBAToU32({0, 0, 0, 255}), ColorConvertRGBAToU32({0, 0, 0, 255}))"
        },
        "BgAddText": {
            "Example": "void ImGui.BgAddText(number x, number y, strig text, int r, int g, int b, int a)"
        },
        "BgAddTriangle": {
            "Example": "void ImGui.BgAddTriangle(number x1, number y1, number x2, number y2, number x3, number y3, int r, int g, int b, int a, number thickness = 1.0)"
        },
        "BgAddTriangleFilled": {
            "Example": "void ImGui.AddTriangleFilled(number x1, number y1, number x2, number y2, number x3, number y3, int r, int g, int b, int a)"
        },
        "Bullet": null,
        "BulletText": null,
        "Button": null,
        "CalcItemWidth": null,
        "CalcTextSize": null,
        "CaptureKeyboardFromApp": null,
        "CaptureMouseFromApp": null,
        "Checkbox": null,
        "CloseCurrentPopup": null,
        "CollapsingHeader": null,
        "ColorConvertFloat4ToU32": {
            "Description": "Converts a float 4 into a packed color.",
            "Example": "int ImGui.ColorConvertFloat4ToU32(table<int, number> color)"
        },
        "ColorConvertHSVtoRGB": null,
        "ColorConvertRGBAToU32": {
            "Description": "Converts an rgba table to a packed color.",
            "Example": "int ImGui.ColorConvertRGBAToU32(table<int, int> rgba)"
        },
        "ColorConvertRGBtoHSV": null,
        "ColorConvertU32ToFloat4": {
            "Description": "Converts a packed color into a float 4.",
            "Example": "table<int, number> ImGui.ColorConvertU32ToFloat4(int color)"
        },
        "ColorEdit3": null,
        "ColorEdit4": null,
        "ColorPicker3": null,
        "ColorPicker4": null,
        "Columns": null,
        "Combo": null,
        "DragFloat": null,
        "DragFloat2": null,
        "DragFloat3": null,
        "DragFloat4": null,
        "DragInt": null,
        "DragInt2": null,
        "DragInt3": null,
        "DragInt4": null,
        "Dummy": null,
        "End": null,
        "EndChild": null,
        "EndChildFrame": null,
        "EndCombo": null,
        "EndGroup": null,
        "EndMainMenuBar": null,
        "EndMenu": null,
        "EndMenuBar": null,
        "EndPopup": null,
        "EndTabBar": null,
        "EndTabItem": null,
        "EndTable": {
            "Example": "void ImGui.EndTable()"
        },
        "EndTooltip": null,
        "GetClipboardText": null,
        "GetColorU32": null,
        "GetColumnIndex": null,
        "GetColumnOffset": null,
        "GetColumnWidth": null,
        "GetColumnsCount": null,
        "GetContentRegionAvail": null,
        "GetContentRegionMax": null,
        "GetCursorPos": null,
        "GetCursorPosX": null,
        "GetCursorPosY": null,
        "GetCursorScreenPos": null,
        "GetCursorStartPos": null,
        "GetDisplaySize": {
            "Example": "number, number ImGui.GetDisplaySize()"
        },
        "GetFont": null,
        "GetFontSize": null,
        "GetFontTexUvWhitePixel": null,
        "GetFrameCount": null,
        "GetFrameHeight": null,
        "GetFrameHeightWithSpacing": null,
        "GetFrameRate": {
            "Example": "number ImGui.GetFrameRate()"
        },
        "GetID": null,
        "GetItemRectMax": null,
        "GetItemRectMin": null,
        "GetItemRectSize": null,
        "GetKeyIndex": null,
        "GetMouseCursor": null,
        "GetMouseDragDelta": null,
        "GetMousePos": null,
        "GetMousePosOnOpeningCurrentPopup": null,
        "GetScrollMaxX": null,
        "GetScrollMaxY": null,
        "GetScrollX": null,
        "GetScrollY": null,
        "GetStyleColorName": null,
        "GetStyleColorVec4": null,
        "GetTextLineHeight": null,
        "GetTextLineHeightWithSpacing": null,
        "GetTime": null,
        "GetTreeNodeToLabelSpacing": null,
        "GetWindowContentRegionMax": null,
        "GetWindowContentRegionMin": null,
        "GetWindowContentRegionWidth": null,
        "GetWindowDpiScale": null,
        "GetWindowHeight": null,
        "GetWindowPos": null,
        "GetWindowSize": null,
        "GetWindowWidth": null,
        "Indent": null,
        "InputDouble": null,
        "InputFloat": null,
        "InputFloat2": null,
        "InputFloat3": null,
        "InputFloat4": null,
        "InputInt": null,
        "InputInt2": null,
        "InputInt3": null,
        "InputInt4": null,
        "InputText": null,
        "InputTextMultiline": null,
        "InputTextWithHint": null,
        "InvisibleButton": null,
        "IsAnyItemActive": null,
        "IsAnyItemFocused": null,
        "IsAnyItemHovered": null,
        "IsAnyMouseDown": null,
        "IsItemActivated": null,
        "IsItemActive": null,
        "IsItemClicked": null,
        "IsItemDeactivated": null,
        "IsItemDeactivatedAfterEdit": null,
        "IsItemEdited": null,
        "IsItemFocused": null,
        "IsItemHovered": null,
        "IsItemToggledOpen": null,
        "IsItemVisible": null,
        "IsKeyDown": null,
        "IsKeyPressed": null,
        "IsKeyReleased": null,
        "IsMouseClicked": null,
        "IsMouseDoubleClicked": null,
        "IsMouseDown": null,
        "IsMouseDragging": null,
        "IsMouseHoveringRect": null,
        "IsMouseReleased": null,
        "IsPopupOpen": null,
        "IsRectVisible": null,
        "IsWindowAppearing": null,
        "IsWindowCollapsed": null,
        "IsWindowFocused": null,
        "IsWindowHovered": null,
        "LabelText": null,
        "ListBox": null,
        "ListBoxFooter": null,
        "ListBoxHeader": null,
        "LogButtons": null,
        "LogFinish": null,
        "LogText": null,
        "LogToClipboard": null,
        "LogToFile": null,
        "LogToTTY": null,
        "MenuItem": null,
        "NewLine": null,
        "NextColumn": null,
        "OpenPopup": null,
        "OpenPopupOnItemClick": null,
        "PopAllowKeyboardFocus": null,
        "PopButtonRepeat": null,
        "PopClipRect": null,
        "PopFont": null,
        "PopID": null,
        "PopItemWidth": null,
        "PopStyleColor": null,
        "PopStyleVar": null,
        "PopTextWrapPos": null,
        "ProgressBar": null,
        "PushAllowKeyboardFocus": null,
        "PushButtonRepeat": null,
        "PushClipRect": null,
        "PushFont": null,
        "PushID": null,
        "PushItemWidth": null,
        "PushStyleColor": null,
        "PushStyleVar": null,
        "PushTextWrapPos": null,
        "RadioButton": null,
        "ResetMouseDragDelta": null,
        "SameLine": null,
        "Selectable": null,
        "Separator": null,
        "SetClipboardText": null,
        "SetColumnOffset": null,
        "SetColumnWidth": null,
        "SetCursorPos": null,
        "SetCursorPosX": null,
        "SetCursorPosY": null,
        "SetCursorScreenPos": null,
        "SetItemAllowOverlap": null,
        "SetItemDefaultFocus": null,
        "SetKeyboardFocusHere": null,
        "SetMouseCursor": null,
        "SetNextItemOpen": null,
        "SetNextItemWidth": null,
        "SetNextWindowBgAlpha": null,
        "SetNextWindowCollapsed": null,
        "SetNextWindowContentSize": null,
        "SetNextWindowFocus": null,
        "SetNextWindowPos": null,
        "SetNextWindowSize": null,
        "SetNextWindowSizeConstraints": null,
        "SetScrollFromPosX": null,
        "SetScrollFromPosY": null,
        "SetScrollHereX": null,
        "SetScrollHereY": null,
        "SetScrollX": null,
        "SetScrollY": null,
        "SetTabItemClosed": null,
        "SetTooltip": null,
        "SetWindowCollapsed": null,
        "SetWindowFocus": null,
        "SetWindowFontScale": null,
        "SetWindowPos": null,
        "SetWindowSize": null,
        "SliderAngle": null,
        "SliderFloat": null,
        "SliderFloat2": null,
        "SliderFloat3": null,
        "SliderFloat4": null,
        "SliderInt": null,
        "SliderInt2": null,
        "SliderInt3": null,
        "SliderInt4": null,
        "SmallButton": null,
        "Spacing": null,
        "TableNextColumn": {
            "Example": "void ImGui.TableNextColumn()"
        },
        "TableNextRow": {
            "Example": "void ImGui.TableNextRow()"
        },
        "TableSetColumnIndex": {
            "Example": "bool ImGui.TableSetColumnIndex(int column)"
        },
        "TableSetupColumn": {
            "Example": "void ImGui.TableSetupColumn(string strId, ImGuiTableColumnFlags flags)"
        },
        "Text": null,
        "TextColored": null,
        "TextDisabled": null,
        "TextUnformatted": null,
        "TextWrapped": null,
        "TreeNode": null,
        "TreeNodeEx": null,
        "TreePop": null,
        "TreePush": null,
        "Unindent": null,
        "VSliderFloat": null,
        "VSliderInt": null,
        "Value": null
    },
    "ImGuiCol": {
        "Border": null,
        "BorderShadow": null,
        "Button": null,
        "ButtonActive": null,
        "ButtonHovered": null,
        "COUNT": null,
        "CheckMark": null,
        "ChildBg": null,
        "DragDropTarget": null,
        "FrameBg": null,
        "FrameBgActive": null,
        "FrameBgHovered": null,
        "Header": null,
        "HeaderActive": null,
        "HeaderHovered": null,
        "MenuBarBg": null,
        "ModalWindowDarkening": null,
        "ModalWindowDimBg": null,
        "NavHighlight": null,
        "NavWindowingDimBg": null,
        "NavWindowingHighlight": null,
        "PlotHistogram": null,
        "PlotHistogramHovered": null,
        "PlotLines": null,
        "PlotLinesHovered": null,
        "PopupBg": null,
        "ResizeGrip": null,
        "ResizeGripActive": null,
        "ResizeGripHovered": null,
        "ScrollbarBg": null,
        "ScrollbarGrab": null,
        "ScrollbarGrabActive": null,
        "ScrollbarGrabHovered": null,
        "Separator": null,
        "SeparatorActive": null,
        "SeparatorHovered": null,
        "SliderGrab": null,
        "SliderGrabActive": null,
        "Tab": null,
        "TabActive": null,
        "TabHovered": null,
        "TabUnfocused": null,
        "TabUnfocusedActive": null,
        "Text": null,
        "TextDisabled": null,
        "TextSelectedBg": null,
        "TitleBg": null,
        "TitleBgActive": null,
        "TitleBgCollapsed": null,
        "WindowBg": null
    },
    "ImGuiColorEditFlags": {
        "AlphaBar": null,
        "AlphaPreview": null,
        "AlphaPreviewHalf": null,
        "DataTypeMask_": null,
        "DefaultOptions_": null,
        "DisplayHSV": null,
        "DisplayHex": null,
        "DisplayMask_": null,
        "DisplayRGB": null,
        "Float": null,
        "HDR": null,
        "InputHSV": null,
        "InputMask_": null,
        "InputRGB": null,
        "NoAlpha": null,
        "NoBorder": null,
        "NoDragDrop": null,
        "NoInputs": null,
        "NoLabel": null,
        "NoOptions": null,
        "NoPicker": null,
        "NoSidePreview": null,
        "NoSmallPreview": null,
        "NoTooltip": null,
        "None": null,
        "PickerHueBar": null,
        "PickerHueWheel": null,
        "PickerMask_": null,
        "Uint8": null
    },
    "ImGuiComboFlags": {
        "HeightLarge": null,
        "HeightLargest": null,
        "HeightMask": null,
        "HeightRegular": null,
        "HeightSmall": null,
        "NoArrowButton": null,
        "NoPreview": null,
        "None": null,
        "PopupAlignLeft": null
    },
    "ImGuiCond": {
        "Always": null,
        "Appearing": null,
        "FirstUseEver": null,
        "None": null,
        "Once": null
    },
    "ImGuiDir": {
        "COUNT": null,
        "Down": null,
        "Left": null,
        "None": null,
        "Right": null,
        "Up": null
    },
    "ImGuiFocusedFlags": {
        "AnyWindow": null,
        "ChildWindows": null,
        "None": null,
        "RootAndChildWindows": null,
        "RootWindow": null
    },
    "ImGuiHoveredFlags": {
        "AllowWhenBlockedByActiveItem": null,
        "AllowWhenBlockedByPopup": null,
        "AllowWhenDisabled": null,
        "AllowWhenOverlapped": null,
        "AnyWindow": null,
        "ChildWindows": null,
        "None": null,
        "RectOnly": null,
        "RootAndChildWindows": null,
        "RootWindow": null
    },
    "ImGuiInputTextFlags": {
        "AllowTabInput": null,
        "AlwaysOverwrite": null,
        "AutoSelectAll": null,
        "CallbackAlways": null,
        "CallbackCharFilter": null,
        "CallbackCompletion": null,
        "CallbackEdit": null,
        "CallbackHistory": null,
        "CallbackResize": null,
        "CharsDecimal": null,
        "CharsHexadecimal": null,
        "CharsNoBlank": null,
        "CharsScientific": null,
        "CharsUppercase": null,
        "CtrlEnterForNewLine": null,
        "EnterReturnsTrue": null,
        "MergedItem": null,
        "Multiline": null,
        "NoHorizontalScroll": null,
        "NoMarkEdited": null,
        "NoUndoRedo": null,
        "None": null,
        "Password": null,
        "ReadOnly": null
    },
    "ImGuiKey": {
        "A": null,
        "Backspace": null,
        "C": null,
        "COUNT": null,
        "Delete": null,
        "DownArrow": null,
        "End": null,
        "Enter": null,
        "Escape": null,
        "Home": null,
        "Insert": null,
        "KeyPadEnter": null,
        "LeftArrow": null,
        "PageDown": null,
        "PageUp": null,
        "RightArrow": null,
        "Space": null,
        "Tab": null,
        "UpArrow": null,
        "V": null,
        "X": null,
        "Y": null,
        "Z": null
    },
    "ImGuiMouseButton": {
        "ImGuiMouseButton_COUNT": null,
        "ImGuiMouseButton_Left": null,
        "ImGuiMouseButton_Middle": null,
        "ImGuiMouseButton_Right": null
    },
    "ImGuiMouseCursor": {
        "Arrow": null,
        "COUNT": null,
        "Hand": null,
        "None": null,
        "NotAllowed": null,
        "ResizeAll": null,
        "ResizeEW": null,
        "ResizeNESW": null,
        "ResizeNS": null,
        "ResizeNWSE": null,
        "TextInput": null
    },
    "ImGuiPopupFlags": {
        "AnyPopup": null,
        "AnyPopupId": null,
        "AnyPopupLevel": null,
        "MouseButtonDefault_": null,
        "MouseButtonLeft": null,
        "MouseButtonMask_": null,
        "MouseButtonMiddle": null,
        "MouseButtonRight": null,
        "NoOpenOverExistingPopup": null,
        "NoOpenOverItems": null,
        "None": null
    },
    "ImGuiSelectableFlags": {
        "AllowDoubleClick": null,
        "AllowItemOverlap": null,
        "Disabled": null,
        "DontClosePopups": null,
        "None": null,
        "SpanAllColumns": null
    },
    "ImGuiStyleVar": {
        "Alpha": null,
        "ButtonTextAlign": null,
        "COUNT": null,
        "CellPadding": null,
        "ChildBorderSize": null,
        "ChildRounding": null,
        "DisabledAlpha": null,
        "FrameBorderSize": null,
        "FramePadding": null,
        "FrameRounding": null,
        "GrabMinSize": null,
        "GrabRounding": null,
        "IndentSpacing": null,
        "ItemInnerSpace": null,
        "ItemSpacing": null,
        "PopupBorderSize": null,
        "PopupRounding": null,
        "ScrollbarRounding": null,
        "ScrollbarSize": null,
        "SelectableTextAlign": null,
        "TabRounding": null,
        "WindowBorderSize": null,
        "WindowMinSize": null,
        "WindowPadding": null,
        "WindowRounding": null,
        "WindowTitleAlign": null
    },
    "ImGuiTabBarFlags": {
        "AutoSelectNewTabs": null,
        "FittingPolicyDefault_": null,
        "FittingPolicyMask_": null,
        "FittingPolicyResizeDown": null,
        "FittingPolicyScroll": null,
        "NoCloseWithMiddleMouseButton": null,
        "NoTabListScrollingButtons": null,
        "NoTooltip": null,
        "None": null,
        "Reorderable": null,
        "TabListPopupButton": null
    },
    "ImGuiTabItemFlags": {
        "NoCloseWithMiddleMouseButton": null,
        "NoPushId": null,
        "NoTooltip": null,
        "None": null,
        "SetSelected": null,
        "UnsavedDocument": null
    },
    "ImGuiTableColumnFlags": {
        "DefaultSort": null,
        "Disabled": null,
        "IndentDisabled": null,
        "IndentEnable": null,
        "IndentMask_": null,
        "IsEnabled": null,
        "IsHovered": null,
        "IsSorted": null,
        "IsVisible": null,
        "NoClip": null,
        "NoDirectResize_": null,
        "NoHeaderLabel": null,
        "NoHeaderWidth": null,
        "NoHide": null,
        "NoReorder": null,
        "NoResize": null,
        "NoSort": null,
        "NoSortAscending": null,
        "NoSortDescending": null,
        "None": null,
        "PreferSortAscending": null,
        "PreferSortDescending": null,
        "StatusMask_": null,
        "WidthFixed": null,
        "WidthMask_": null,
        "WidthStretch": null
    },
    "ImGuiTableFlags": {
        "Borders": null,
        "BordersH": null,
        "BordersInner": null,
        "BordersInnerH": null,
        "BordersInnerV": null,
        "BordersOuter": null,
        "BordersOuterH": null,
        "BordersOuterV": null,
        "BordersV": null,
        "ContextMenuInBody": null,
        "Hideable": null,
        "NoBordersInBody": null,
        "NoBordersInBodyUntilResize": null,
        "NoClip": null,
        "NoHostExtendX": null,
        "NoHostExtendY": null,
        "NoKeepColumnsVisible": null,
        "NoPadInnerX": null,
        "NoPadOuterX": null,
        "NoSavedSettings": null,
        "None": null,
        "PadOuterX": null,
        "PreciseWidths": null,
        "Reorderable": null,
        "Resizable": null,
        "RowBg": null,
        "ScrollX": null,
        "ScrollY": null,
        "SizingFixedFit": null,
        "SizingFixedSame": null,
        "SizingMask_": null,
        "SizingStretchProp": null,
        "SizingStretchSame": null,
        "SortMulti": null,
        "SortTristate": null,
        "Sortable": null
    },
    "ImGuiTreeNodeFlags": {
        "AllowItemOverlap": null,
        "Bullet": null,
        "CollapsingHeader": null,
        "DefaultOpen": null,
        "FramePadding": null,
        "Framed": null,
        "Leaf": null,
        "NavLeftJumpsBackHere": null,
        "NoAutoOpenOnLog": null,
        "NoTreePushOnOpen": null,
        "None": null,
        "OpenOnArrow": null,
        "OpenOnDoubleClick": null,
        "Selected": null,
        "SpanAvailWidth": null,
        "SpanFullWidth": null
    },
    "ImGuiWindowFlags": {
        "AlwaysAutoResize": null,
        "AlwaysHorizontalScrollbar": null,
        "AlwaysUseWindowPadding": null,
        "AlwaysVerticalScrollbar": null,
        "ChildMenu": null,
        "ChildWindow": null,
        "HorizontalScrollbar": null,
        "MenuBar": null,
        "Modal": null,
        "NavFlattened": null,
        "NoBackground": null,
        "NoBringToFrontOnFocus": null,
        "NoCollapse": null,
        "NoDecoration": null,
        "NoFocusOnAppearing": null,
        "NoInputs": null,
        "NoMouseInputs": null,
        "NoMove": null,
        "NoNav": null,
        "NoNavFocus": null,
        "NoNavInputs": null,
        "NoResize": null,
        "NoSavedSettings": null,
        "NoScrollWithMouse": null,
        "NoScrollbar": null,
        "NoTitleBar": null,
        "None": null,
        "Popup": null,
        "Tooltip": null,
        "UnsavedDocument": null
    },
    "ListGUI": {
        "GetCurrentTab": {
            "Description": "Returns the top most tab.",
            "Example": "Tab ListGUI.GetCurrentTab()"
        },
        "GetPlayerTab": {
            "Description": "Returns a specific player tab. (ranges from 0-31).",
            "Example": "Tab ListGUI.GetPlayerTab(int player)"
        },
        "GetPos": {
            "Description": "Get the current position in screen coordinates.",
            "Example": "number x,y ListGUI.GetPos()"
        },
        "GetRootTab": {
            "Description": "Returns the root tab.",
            "Example": "Tab ListGUI.GetRootTab()"
        },
        "GetSize": {
            "Description": "Get the current size in screen coordinates.",
            "Example": "number x,y ListGUI.GetSize()"
        },
        "LoadTheme": {
            "Description": "Loads a Theme by its name.",
            "Example": "bool ListGUI.LoadTheme(string fileName)\nListGUI.LoadTheme(\"Default\")"
        },
        "RemoveTabFromStack": {
            "Description": "Remoces the tab from the stack and jump back to the tab before.",
            "Example": "ListGUI.RemoveTabFromStack(Tab tab)"
        },
        "SetCurrentTab": {
            "Description": "Adds the tab to the tab stack or jumps back if it is already in the tab stack.",
            "Example": "ListGUI.SetCurrentTab(Tab tab)"
        },
        "SetPos": {
            "Description": "Set the current position in screen coordinates.",
            "Example": "void ListGUI.SetPos(number x, number y)"
        },
        "SetSize": {
            "Description": "Set the current size in screen coordinates.",
            "Example": "void ListGUI.SetSize(number x, number y)"
        }
    },
    "ListWidget": {
        "GetDesc": {
            "Example": "string object:GetDesc()"
        },
        "GetText": {
            "Example": "string object:GetText()"
        },
        "IsVisible": {
            "Example": "bool object:IsVisible()"
        },
        "SetDesc": {
            "Example": "object:SetDesc(string desc)"
        },
        "SetText": {
            "Example": "object:SetText(string text)"
        }
    },
    "Logger": {
        "Log": {
            "Example": "void Logger.Log(eLogColor color, string prefix, string str)"
        },
        "LogError": {
            "Example": "void Logger.LogError(string str)"
        },
        "LogInfo": {
            "Example": "void Logger.LogInfo(string str)"
        }
    },
    "Memory": {
        "Alloc": {
            "Description": "Allocates a block of size bytes of memory, returning a pointer to the beginning of the block. The content of the newly allocated block of memory is not initialized, remaining with indeterminate values. Consider using Memory.MemSet",
            "Example": "int Memory.Alloc(int size = 24)"
        },
        "AllocInt": {
            "Description": "Allocates a 4 byte buffer where an integer can be stored.",
            "Example": "int Memory.AllocInt()"
        },
        "Free": {
            "Description": "Deallocates a block of memory, making it available again for further allocations",
            "Example": "void Memory.Free(int ptr)"
        },
        "GetBaseAddress": {
            "Description": "Returns the base address of the given module.",
            "Example": "int Memory.GetBaseAddress(string moduleName = \"GTA5.exe\")"
        },
        "LuaCallCFunction": {
            "Example": "void Memory.LuaCallCFunction(int addr, variadic_args arguments)"
        },
        "MemSet": {
            "Description": "Sets the first num bytes of the block of memory pointed by ptr to the specified value (interpreted as an unsigned char).",
            "Example": "int Memory.MemSet(int ptr, int val, int num)"
        },
        "ReadByte": {
            "Description": "Reads an 8-bit integer at the given address.",
            "Example": "int Memory.ReadByte(int address)"
        },
        "ReadFloat": {
            "Description": "Reads a float at the given address.",
            "Example": "float Memory.ReadFloat(int address)"
        },
        "ReadInt": {
            "Description": "Reads a 32-bit integer at the given address.",
            "Example": "int Memory.ReadInt(int address)"
        },
        "ReadLong": {
            "Description": "Reads a 64-bit integer at the given address.",
            "Example": "int Memory.ReadLong(int address)"
        },
        "ReadShort": {
            "Description": "Reads an 16-bit integer at the given address.",
            "Example": "int Memory.ReadShort(int address)"
        },
        "ReadString": {
            "Description": "Reads a string at the given address.",
            "Example": "string Memory.ReadString(int address)"
        },
        "ReadUByte": {
            "Description": "Reads an unsigned 8-bit integer at the given address.",
            "Example": "int Memory.ReadUByte(int address)"
        },
        "ReadUInt": {
            "Description": "Reads a unsigned 32-bit integer at the given address.",
            "Example": "int Memory.ReadUInt(int address)"
        },
        "ReadUShort": {
            "Description": "Reads an unsigned 16-bit integer at the given address.",
            "Example": "int Memory.ReadUShort(int address)"
        },
        "ReadV3": {
            "Description": "Reads a Vector3 at the given address.",
            "Example": "V3 Memory.ReadV3(int address)"
        },
        "Rip": {
            "Description": "Rips the given address and returns the ripped address.",
            "Example": "int Memory.Rip(int address)"
        },
        "Scan": {
            "Description": "Scans for a given pattern in a specific module and returns the address if found.",
            "Example": "int Memory.Scan(string pattern, string moduleName = \"GTA5.exe\")"
        },
        "WriteByte": {
            "Description": "Writes an 8-bit integer to the given address.",
            "Example": "void Memory.WriteByte(int address, int value)"
        },
        "WriteFloat": {
            "Description": "Writes a float to the given address.",
            "Example": "void Memory.WriteFloat(int address, float value)"
        },
        "WriteInt": {
            "Description": "Writes a 32-bit integer to the given address.",
            "Example": "void Memory.WriteInt(int address, int value)"
        },
        "WriteLong": {
            "Description": "Writes a 64-bit integer to the given address.",
            "Example": "void Memory.WriteLong(int address, int value)"
        },
        "WriteShort": {
            "Description": "Writes an 16-bit integer to the given address.",
            "Example": "void Memory.WriteShort(int address, int value)"
        },
        "WriteString": {
            "Description": "Writes a string to the given address.",
            "Example": "void Memory.WriteString(int address, string value)"
        },
        "WriteUByte": {
            "Description": "Writes an unsigned 8-bit integer to the given address.",
            "Example": "void Memory.WriteUByte(int address, int value)"
        },
        "WriteUInt": {
            "Description": "Writes a unsigned 32-bit integer to the given address.",
            "Example": "void Memory.WriteUInt(int address, int value)"
        },
        "WriteUShort": {
            "Description": "Writes an unsigned 16-bit integer to the given address.",
            "Example": "void Memory.WriteUShort(int address, int value)"
        },
        "WriteV3": {
            "Description": "Writes a Vector3 to the given address.",
            "Example": "void Memory.WriteV3(int address, V3 value)"
        }
    },
    "ModderDB": {
        "AddModder": {
            "Example": "bool ModderDB.AddModder(int rockstarId, string detection)"
        },
        "AddModderByPlayerId": {
            "Example": "bool ModderDB.AddModderByPlayerId(int playerId, string detection)"
        },
        "GetModderDetections": {
            "Description": "detection format: name, count, lastTime",
            "Example": "table<table<string, int, int>> ModderDB.GetModderDetections(int rockstarId)"
        },
        "GetModderDetectionsByPlayerId": {
            "Description": "detection format: name, count, lastTime",
            "Example": "table<table<string, int, int>> ModderDB.GetModderDetectionsByPlayerId(int playerId)"
        },
        "RemoveModder": {
            "Example": "bool ModderDB.RemoveModder(int rockstarId, string reason)"
        },
        "RemoveModderDetection": {
            "Example": "bool ModderDB.RemoveModderDetection(int rockstarId, string reason)"
        }
    },
    "Natives": {
        "InvokeBool": {
            "Description": "Call a native that returns a boolean.",
            "Example": "bool Natives.InvokeBool(hash, ...)"
        },
        "InvokeFloat": {
            "Description": "Call a native that returns a float.",
            "Example": "float Natives.InvokeFloat(hash, ...)"
        },
        "InvokeInt": {
            "Description": "Call a native that returns an integer.",
            "Example": "int Natives.InvokeInt(hash, ...)"
        },
        "InvokeString": {
            "Description": "Call a native that returns a string.",
            "Example": "string Natives.InvokeString(hash, ...)"
        },
        "InvokeV3": {
            "Description": "Call a native that returns three floats representing a V3.",
            "Example": "float, float, float Natives.InvokeV3(hash, ...)"
        },
        "InvokeVoid": {
            "Description": "Call a native that does not return a value.",
            "Example": "void Natives.InvokeVoid(hash, ...)"
        }
    },
    "NetAddress": {
        "ProxyAddr": {
            "Example": "SocketAddress ProxyAddr"
        },
        "TargetAddr": {
            "Example": "SocketAddress TargetAddr"
        },
        "Type": {
            "Description": "Type of the NetAddress.",
            "Example": "NetAddressType Type"
        }
    },
    "NetAddressType": {
        "DIRECT": null,
        "INVALID": null,
        "NUM_TYPES": null,
        "PEER_RELAY": null,
        "RELAY_SERVER": null
    },
    "NetworkObjectMgr": {
        "ChangeOwner": {
            "Description": "Changes the ownership of a network object.",
            "Example": "void NetworkObjectMgr.ChangeOwner(CNetObject object, CNetGamePlayer player, int migrationType)"
        },
        "GetNetworkObject": {
            "Description": "includeAll - If this flag is set the function will also return unregistering objects and those being reassigned",
            "Example": "CNetObject NetworkObjectMgr.GetNetworkObject(int netId, bool includeAll = false)"
        },
        "UnregisterNetworkObject": {
            "Description": "Unregisters a network object with the manager and removes clones on remote machines if necessary.",
            "Example": "void NetworkObjectMgr.UnregisterNetworkObject(CNetObject object, int reason, bool bForce, bool bDestroyObject)"
        }
    },
    "PlayerGameStateFlags": {
        "PRF_BlockRemotePlayerRecording": {
            "Example": "bool object.bool PRF_BlockRemotePlayerRecording"
        },
        "PRF_UseScriptedWeaponFirePosition": {
            "Example": "bool object.bool PRF_UseScriptedWeaponFirePosition"
        },
        "PlayerPreferFrontSeat": {
            "Example": "bool object.PlayerPreferFrontSeat"
        },
        "allowBikeAlternateAnimations": {
            "Example": "bool object.bool allowBikeAlternateAnimations"
        },
        "bHasMaxHealth": {
            "Example": "bool object.bool bHasMaxHealth"
        },
        "bHasMicrophone": {
            "Example": "bool object.bool bHasMicrophone"
        },
        "bHelmetHasBeenShot": {
            "Example": "bool object.bool bHelmetHasBeenShot"
        },
        "bInvincible": {
            "Example": "bool object.bool bInvincible"
        },
        "cantBeKnockedOffBike": {
            "Example": "int object.int8_t cantBeKnockedOffBike"
        },
        "controlsDisabledByScript": {
            "Example": "bool object.bool controlsDisabledByScript"
        },
        "disableHelmetArmor": {
            "Example": "bool object.bool disableHelmetArmor"
        },
        "disableHomingMissileLockForVehiclePedInside": {
            "Example": "bool object.bool disableHomingMissileLockForVehiclePedInside"
        },
        "disableStartEngine": {
            "Example": "bool object.bool disableStartEngine"
        },
        "disableVehicleCombat": {
            "Example": "bool object.bool disableVehicleCombat"
        },
        "dontActivateRagdollFromExplosions": {
            "Example": "bool object.bool dontActivateRagdollFromExplosions"
        },
        "dontActivateRagdollFromVehicleImpact": {
            "Example": "bool object.bool dontActivateRagdollFromVehicleImpact"
        },
        "dontDragMeOutOfCar": {
            "Example": "bool object.bool dontDragMeOutOfCar"
        },
        "dontTakeOffHelmet": {
            "Example": "bool object.bool dontTakeOffHelmet"
        },
        "everybodyBackOff": {
            "Example": "bool object.bool everybodyBackOff"
        },
        "forceHelmetVisorSwitch": {
            "Example": "bool object.bool forceHelmetVisorSwitch"
        },
        "hasHelmet": {
            "Example": "bool object.bool hasHelmet"
        },
        "hasSetJackSpeed": {
            "Example": "bool object.bool hasSetJackSpeed"
        },
        "ignoreInteriorCheckForSprinting": {
            "Example": "bool object.bool ignoreInteriorCheckForSprinting"
        },
        "ignoreMeleeFistWeaponDamageMult": {
            "Example": "bool object.bool ignoreMeleeFistWeaponDamageMult"
        },
        "ignoresExplosions": {
            "Example": "bool object.bool ignoresExplosions"
        },
        "inTutorial": {
            "Example": "bool object.bool inTutorial"
        },
        "isAntagonisticToPlayer": {
            "Example": "bool object.bool isAntagonisticToPlayer"
        },
        "isPerformingVehicleMelee": {
            "Example": "bool object.bool isPerformingVehicleMelee"
        },
        "isScuba": {
            "Example": "bool object.bool isScuba"
        },
        "isSpectating": {
            "Example": "bool object.bool isSpectating"
        },
        "isSwitchingHelmetVisor": {
            "Example": "bool object.bool isSwitchingHelmetVisor"
        },
        "lawOnlyAttackIfPlayerIsWanted": {
            "Example": "bool object.bool lawOnlyAttackIfPlayerIsWanted"
        },
        "lawPedsCanFleeFromNonWantedPlayer": {
            "Example": "bool object.bool lawPedsCanFleeFromNonWantedPlayer"
        },
        "myVehicleIsMyInteresting": {
            "Example": "bool object.bool myVehicleIsMyInteresting"
        },
        "neverTarget": {
            "Example": "bool object.bool neverTarget"
        },
        "newMaxHealthArmour": {
            "Example": "bool object.bool newMaxHealthArmour"
        },
        "noCriticalHits": {
            "Example": "bool object.bool noCriticalHits"
        },
        "notDamagedByBullets": {
            "Example": "bool object.bool notDamagedByBullets"
        },
        "notDamagedByCollisions": {
            "Example": "bool object.bool notDamagedByCollisions"
        },
        "notDamagedByFlames": {
            "Example": "bool object.bool notDamagedByFlames"
        },
        "notDamagedByMelee": {
            "Example": "bool object.bool notDamagedByMelee"
        },
        "notDamagedBySmoke": {
            "Example": "bool object.bool notDamagedBySmoke"
        },
        "notDamagedBySteam": {
            "Example": "bool object.bool notDamagedBySteam"
        },
        "pedIsArresting": {
            "Example": "bool object.bool pedIsArresting"
        },
        "pendingTutorialSessionChange": {
            "Example": "bool object.bool pendingTutorialSessionChange"
        },
        "playerIsWeird": {
            "Example": "bool object.bool playerIsWeird"
        },
        "playersDontDragMeOutOfCar": {
            "Example": "bool object.bool playersDontDragMeOutOfCar"
        },
        "randomPedsFlee": {
            "Example": "bool object.bool randomPedsFlee"
        },
        "respawning": {
            "Example": "bool object.bool respawning"
        },
        "swatHeliSpawnWithinLastSpottedLocation": {
            "Example": "bool object.bool swatHeliSpawnWithinLastSpottedLocation"
        },
        "treatFriendlyTargettingAndDamage": {
            "Example": "bool object.bool treatFriendlyTargettingAndDamage"
        },
        "useKinematicModeWhenStationary": {
            "Example": "bool object.bool useKinematicModeWhenStationary"
        },
        "useKinematicPhysics": {
            "Example": "bool object.bool useKinematicPhysics"
        },
        "useLockpickVehicleEntryAnimations": {
            "Example": "bool object.bool useLockpickVehicleEntryAnimations"
        },
        "useOverrideFootstepPtFx": {
            "Example": "bool object.bool useOverrideFootstepPtFx"
        },
        "willJackAnyPlayer": {
            "Example": "bool object.bool willJackAnyPlayer"
        },
        "willJackWantedPlayersRatherThanStealCar": {
            "Example": "bool object.bool willJackWantedPlayersRatherThanStealCar"
        }
    },
    "Players": {
        "Get": {
            "Description": "Returns the players for a given filter.",
            "Example": "table<int, int> Players.Get(ePlayerListSort filter, string search)"
        },
        "GetByConId": {
            "Description": "Returns the NetGamePlayer for a given connection id.",
            "Example": "CNetGamePlayer Players.GetByConId(int cxn)"
        },
        "GetByEndpointId": {
            "Description": "Returns the NetGamePlayer for a given endpoint id.",
            "Example": "CNetGamePlayer Players.GetByEndpointId(int ep)"
        },
        "GetByGamerId": {
            "Description": "Returns the NetGamePlayer for a given gamer id.",
            "Example": "CNetGamePlayer Players.GetByGamerId(int gamerId)"
        },
        "GetByIP": {
            "Description": "Returns the NetGamePlayer for a given ip.",
            "Example": "CNetGamePlayer Players.GetByIP(netSocketAddress addr)\nCNetGamePlayer Players.GetByIP(int ip)"
        },
        "GetById": {
            "Description": "Returns the NetGamePlayer for a given playerId.",
            "Example": "CNetGamePlayer Players.GetById(int playerId)"
        },
        "GetByPeerId": {
            "Description": "Returns the NetGamePlayer for a given peer id.",
            "Example": "CNetGamePlayer Players.GetByPeerId(int peerId)"
        },
        "GetByRockstarId": {
            "Description": "Returns the NetGamePlayer for a given rockstar id.",
            "Example": "CNetGamePlayer Players.GetByRockstarId(int rid)"
        },
        "GetCPed": {
            "Description": "Gets the player's CPed.",
            "Example": "CPed Players.GetCPed(int playerId)"
        },
        "GetCam": {
            "Description": "Gets the player's cam position.",
            "Example": "V3 Players.GetCam(int playerId)"
        },
        "GetCamRot": {
            "Description": "Gets the player's cam rotation in eulers.",
            "Example": "V3 Players.GetCamRot(int playerId)"
        },
        "GetIP": {
            "Description": "Returns the player SocketAddress.",
            "Example": "SocketAddress Players.GetIP(int playerId)"
        },
        "GetIPInfo": {
            "Description": "Returns info about players ip.",
            "Example": "table<string, string> Players.GetIPInfo(int playerId)"
        },
        "GetIPString": {
            "Description": "Returns a readable player ip string including the type of the connection.",
            "Example": "string Players.GetIPString(int playerId)"
        },
        "GetName": {
            "Description": "Returns the player name.",
            "Example": "string Players.GetName(int playerId)"
        },
        "GetNetAddress": {
            "Description": "Returns the player NetAddress.",
            "Example": "NetAddress Players.GetNetAddress(int playerId)"
        },
        "GetTags": {
            "Description": "Returns the player tags as string.",
            "Example": "string Players.GetTags(int playerId)"
        },
        "GetWaypoint": {
            "Description": "Gets if the player has a waypoint, the position of the waypoint, and the owner of the waypoint.",
            "Example": "bool, V3, int Players.GetWaypoint(int playerId)"
        }
    },
    "PoolMgr": {
        "GetCCamera": {
            "Description": "Return the camera class object. Can have a performance impact if called to frequently.",
            "Example": "CPhysical PoolMgr.GetCCamera(int index)"
        },
        "GetCObject": {
            "Description": "Return the object class object. Can have a performance impact if called to frequently.",
            "Example": "CPhysical PoolMgr.GetCObject(int index)"
        },
        "GetCPed": {
            "Description": "Return the ped class object. Can have a performance impact if called to frequently.",
            "Example": "CPed PoolMgr.GetCPed(int index)"
        },
        "GetCPickup": {
            "Description": "Return the pickup class object. Can have a performance impact if called to frequently.",
            "Example": "CPhysical PoolMgr.GetCPickup(int index)"
        },
        "GetCVehicle": {
            "Description": "Return the vehicle class object. Can have a performance impact if called to frequently.",
            "Example": "CVehicle PoolMgr.GetCVehicle(int index)"
        },
        "GetCamera": {
            "Description": "Return the camera handle for a specific index. Can have a performance impact if called to frequently.",
            "Example": "int PoolMgr.GetCamera(int index)"
        },
        "GetCurrentCameraCount": {
            "Description": "Return the current amount of cameras.",
            "Example": "int PoolMgr.GetCurrentCameraCount()"
        },
        "GetCurrentObjectCount": {
            "Description": "Return the current amount of objects.",
            "Example": "int PoolMgr.GetCurrentObjectCount()"
        },
        "GetCurrentPedCount": {
            "Description": "Return the current amount of peds.",
            "Example": "int PoolMgr.GetCurrentPedCount()"
        },
        "GetCurrentPickupCount": {
            "Description": "Return the current amount of pickups.",
            "Example": "int PoolMgr.GetCurrentPickupCount()"
        },
        "GetCurrentVehicleCount": {
            "Description": "Return the current amount of vehicles.",
            "Example": "int PoolMgr.GetCurrentVehicleCount()"
        },
        "GetMaxCameraCount": {
            "Description": "Return the maximum amount of cameras.",
            "Example": "int PoolMgr.GetMaxCameraCount()"
        },
        "GetMaxObjectCount": {
            "Description": "Return the maximum amount of objects.",
            "Example": "int PoolMgr.GetMaxObjectCount()"
        },
        "GetMaxPedCount": {
            "Description": "Return the maximum amount of peds.",
            "Example": "int PoolMgr.GetMaxPedCount()"
        },
        "GetMaxPickupCount": {
            "Description": "Return the maximum amount of pickups.",
            "Example": "int PoolMgr.GetMaxPickupCount()"
        },
        "GetMaxVehicleCount": {
            "Description": "Return the maximum amount of vehicles.",
            "Example": "int PoolMgr.GetMaxVehicleCount()"
        },
        "GetObject": {
            "Description": "Return the object handle for a specific index. Can have a performance impact if called to frequently.",
            "Example": "int PoolMgr.GetObject(int index)"
        },
        "GetPed": {
            "Description": "Return the ped handle for a specific index. Can have a performance impact if called to frequently.",
            "Example": "int PoolMgr.GetPed(int index)"
        },
        "GetPickup": {
            "Description": "Return the pickup handle for a specific index. Can have a performance impact if called to frequently.",
            "Example": "int PoolMgr.GetPickup(int index)"
        },
        "GetRenderedObjects": {
            "Description": "Return all currrently rendered CObject pointers",
            "Example": "table<int, CObject> PoolMgr.GetRenderedObjects()"
        },
        "GetRenderedPeds": {
            "Description": "Return all currrently rendered CPed pointers",
            "Example": "table<int, CPed> PoolMgr.GetRenderedPeds()"
        },
        "GetRenderedVehicles": {
            "Description": "Return all currrently rendered CVehicle pointers",
            "Example": "table<int, CVehicle> PoolMgr.GetRenderedVehicles()"
        },
        "GetVehicle": {
            "Description": "Return the vehicle handle for a specific index. Can have a performance impact if called to frequently.",
            "Example": "int PoolMgr.GetVehicle(int index)"
        }
    },
    "Script": {
        "ExecuteAsScript": {
            "Description": "Changes the current script context to your desired script, calls your function and then restores the orignal script context.",
            "Example": "void Script.ExecuteAsScript(string scriptName, function fn)\nvoid Script.ExecuteAsScript(int scriptHash, function fn)"
        },
        "QueueJob": {
            "Description": "Queues a function that will be exeucted in a native thread.",
            "Example": "int Script.QueueJob(function(script, variadic_args) func, variadic_args va)"
        },
        "RegisterLooped": {
            "Description": "Register a script that will be called in a loop.",
            "Example": "int Script.RegisterLooped(function(variadic_args) func, variadic_args va)"
        },
        "Yield": {
            "Description": "Sleeps for the given time in milliseconds. Should only be executed in a native thread.",
            "Example": "void Script.Yield(int ms)\nvoid Script.Yield()"
        }
    },
    "ScriptGlobal": {
        "GetBool": {
            "Example": "bool ScriptGlobal.GetBool(int global)"
        },
        "GetFloat": {
            "Example": "number ScriptGlobal.GetFloat(int global)"
        },
        "GetInt": {
            "Example": "int ScriptGlobal.GetInt(int global)"
        },
        "GetPtr": {
            "Example": "int ScriptGlobal.GetPtr(int global)"
        },
        "GetString": {
            "Example": "string ScriptGlobal.GetString(int global)"
        },
        "GetTunableByHash": {
            "Description": "Returns a pointer to the tunable. Returns 0 if not found.",
            "Example": "int ScriptGlobal.GetTunableByHash(int hash)"
        },
        "SetBool": {
            "Example": "void ScriptGlobal.SetBool(int global, bool value)"
        },
        "SetFloat": {
            "Example": "void ScriptGlobal.SetFloat(int global, number value)"
        },
        "SetInt": {
            "Example": "void ScriptGlobal.SetInt(int global, int value)"
        },
        "SetString": {
            "Example": "void ScriptGlobal.SetString(int global, string text)"
        }
    },
    "ScriptLocal": {
        "GetBool": {
            "Example": "bool ScriptLocal.GetBool(int scriptHash, int local)"
        },
        "GetFloat": {
            "Example": "number ScriptLocal.GetFloat(int scriptHash, int local)"
        },
        "GetInt": {
            "Example": "int ScriptLocal.GetInt(int scriptHash, int local)"
        },
        "GetPtr": {
            "Example": "int ScriptLocal.GetPtr(int scriptHash, int global)"
        },
        "GetString": {
            "Example": "string ScriptLocal.GetString(int scriptHash, int local)"
        },
        "SetBool": {
            "Example": "void ScriptLocal.SetBool(int scriptHash, int local, bool value)"
        },
        "SetFloat": {
            "Example": "void ScriptLocal.SetFloat(int scriptHash, int local, number value)"
        },
        "SetInt": {
            "Example": "void ScriptLocal.SetInt(int scriptHash, int local, int value)"
        },
        "SetString": {
            "Example": "void ScriptLocal.SetString(int scriptHash, int local, string text)"
        }
    },
    "SetShouldUnload": {
        "Description": "Mark the script as done. It will automatically be unloaded by the menu.",
        "Example": "SetShouldUnload()"
    },
    "ShouldUnload": {
        "Description": "Check if the script should unload. Use this to exit all your loops etc.",
        "Example": "ShouldUnload()"
    },
    "SocketAddress": {
        "IPv4": {
            "Description": "This value is a raw 4 byte integer."
        },
        "Port": null,
        "ToString": {
            "Example": "string object:ToString(bool port)\nstring SocketAddress.ToString(SocketAddress address, bool port)"
        }
    },
    "Stats": {
        "GetBool": {
            "Example": "bool,int Stats.GetBool(int hash)"
        },
        "GetFloat": {
            "Example": "bool,number Stats.GetFloat(int hash)"
        },
        "GetInt": {
            "Example": "bool,int Stats.GetInt(int hash)"
        },
        "SetBool": {
            "Example": "bool Stats.SetBool(int hash, int value)"
        },
        "SetFloat": {
            "Example": "bool Stats.SetFloat(int hash, number value)"
        },
        "SetInt": {
            "Example": "bool Stats.SetInt(int hash, int value)"
        }
    },
    "Tab": {
        "AddFeature": {
            "Description": "Adds a feature to the tab.",
            "Example": "void object:AddFeature(int hash)\nvoid object:AddFeature(int hash, int index)"
        },
        "AddSeperator": {
            "Example": "object:AddSeperator(string text)"
        },
        "AddSubTab": {
            "Description": "Adds Tab Button and returns the created tab.",
            "Example": "Tab object:AddSubTab(string text, string desc)"
        },
        "GetContent": {
            "Example": "ListWidget object:GetContent(int index)"
        },
        "GetContentSize": {
            "Description": "Returns the number of widgets in this tab.",
            "Example": "int object:GetContentSize()"
        },
        "GetDesc": {
            "Example": "string object:GetDesc()"
        },
        "GetSelectedContent": {
            "Example": "ListWidget object:GetSelectedContent()"
        },
        "GetSelectedContentId": {
            "Example": "int object:GetSelectedContentId()"
        },
        "GetSubTab": {
            "Description": "Returns a sub tab by name.",
            "Example": "Tab object:GetSubTab(string text)"
        },
        "GetText": {
            "Example": "string object:GetText()"
        },
        "RemoveSubTab": {
            "Description": "Removes a sub tab and returns the amount of removed tab buttons.",
            "Example": "int object:RemoveSubTab(Tab tab)"
        },
        "SetDesc": {
            "Example": "object:SetDesc(string desc)"
        },
        "SetSelectedContentId": {
            "Example": "object:SetSelectedContentId(int index)"
        },
        "SetText": {
            "Example": "object:SetText(string text)"
        }
    },
    "TaskSlotData": {
        "taskActive": {
            "Example": "bool object.taskActive"
        },
        "taskPriority": {
            "Example": "int object.taskPriority"
        },
        "taskSequenceId": {
            "Example": "int object.taskSequenceId"
        },
        "taskTreeDepth": {
            "Example": "int object.taskTreeDepth"
        },
        "taskType": {
            "Example": "int object.taskType"
        }
    },
    "Texture": {
        "GetTexture": {
            "Example": "D3D11Texture Texture.GetTexture(int id)"
        },
        "IsTextureValid": {
            "Example": "bool Texture.IsTextureValid(int id)"
        },
        "LoadTexture": {
            "Description": "Creates a new texture that can load files such as gif,jpg,png etc.",
            "Example": "int Texture.LoadTexture(string file)"
        },
        "LoadTextureAsync": {
            "Description": "Creates a new texture that can load files such as gif,jpg,png etc.",
            "Example": "int Texture.LoadTextureAsync(string file)"
        }
    },
    "Time": {
        "Get": {
            "Description": "Retrieves the current system time in seconds.",
            "Example": "int Time.Get()"
        },
        "GetEpoche": {
            "Description": "Retrieves the time since Epoche in seconds.",
            "Example": "int Time.GetEpoche()"
        },
        "GetEpocheMs": {
            "Description": "Retrieves the time since Epoche in milliseconds.",
            "Example": "int Time.GetEpocheMs()"
        },
        "GetEpocheNs": {
            "Description": "Retrieves the time since Epoche in nanoseconds, might not equal system time.",
            "Example": "int Time.GetEpocheNs()"
        }
    },
    "Utils": {
        "ExecuteScript": {
            "Description": "Executes the given script. File can be relative or absolute.",
            "Example": "bool Utils.ExecuteScript(string file)\nUtils.ExecuteScript(\"MyScript.lua\")"
        },
        "GetClipBoardText": {
            "Example": "string Utils.GetClipBoardText()"
        },
        "GetLastJoinedPlayer": {
            "Description": "Returns the last joined player id.",
            "Example": "int Utils.GetLastJoinedPlayer()"
        },
        "GetLastLeftPlayer": {
            "Description": "Returns the last joined player id.",
            "Example": "int Utils.GetLastLeftPlayer()"
        },
        "GetSelectedPlayer": {
            "Description": "Returns the current selected player id.",
            "Example": "int Utils.GetSelectedPlayer()"
        },
        "IsKeyDown": {
            "Description": "Check if a key is down. Use the Microsoft Virtual Key Codes.",
            "Example": "bool Utils.IsKeyDown(int vk)"
        },
        "IsKeyPressed": {
            "Description": "Check if a key has been pressed or is hold down for longer time. Use the Microsoft Virtual Key Codes.",
            "Example": "bool Utils.IsKeyPressed(int vk)"
        },
        "Joaat": {
            "Description": "Hashes a string using joaat. Returns the hash as unsigned int.",
            "Example": "int Utils.Joaat(string str)"
        },
        "MciSendString": {
            "Description": "The mciSendString function sends a command string to an MCI device. The device that the command is sent to is specified in the command string. For more information browse it on the internet.",
            "Example": "bool Utils.MciSendString(string str)"
        },
        "PlaySound": {
            "Description": "Can be used to play mp3 or wav files.",
            "Example": "bool Utils.PlaySound(string str, bool looped)"
        },
        "SetClipBoardText": {
            "Description": "For no extra notification leave whatNotify empty.",
            "Example": "Utils.SetClipBoardText(string text, string whatNotify)"
        },
        "SetSelectedPlayer": {
            "Description": "Sets the current selected Player Id. Returns the previous selected player id.",
            "Example": "int Utils.SetSelectedPlayer(int playerId)"
        },
        "StopSound": {
            "Description": "Stops all currently played sounds.",
            "Example": "void Utils.StopSound()"
        },
        "sJoaat": {
            "Description": "Hashes a string using joaat. Returns the hash as signed int.",
            "Example": "int Utils.sJoaat(string str)"
        }
    },
    "V2": {
        "Add": {
            "Description": "Add a value to a V2.",
            "Example": "V2 V2.Add(V2 vector, number value)\nV2 V2.Add(V2 vector, V2 value)"
        },
        "Multiply": {
            "Description": "Multiply a value with a V2.",
            "Example": "V2 V2.Multiply(V2 vector, number value)\nV2 V2.Multiply(V2 vector, V2 value)"
        },
        "New": {
            "Description": "Create a new V2 object.",
            "Example": "V2 V2.New()\nV2 V2.New(number x, number y, number z)"
        },
        "Subtract": {
            "Description": "Subtract a value from a V2.",
            "Example": "V2 V2.Subtract(V2 vector, number value)\nV2 V2.Subtract(V2 vector, V2 value)"
        },
        "x": null,
        "y": null
    },
    "V3": {
        "Add": {
            "Description": "Add a value to a V3.",
            "Example": "V3 V3.Add(V3 vector, number value)\nV3 V3.Add(V3 vector, V3 value)"
        },
        "DirectionToRotation": {
            "Description": "Takes a direction and returns a rotation.",
            "Example": "V3 V3.DirectionToRotation(V3 vector)"
        },
        "Multiply": {
            "Description": "Multiply a value with a V3.",
            "Example": "V3 V3.Multiply(V3 vector, number value)\nV3 V3.Multiply(V3 vector, V3 value)"
        },
        "New": {
            "Description": "Create a new V3 object.",
            "Example": "V3 V3.New()\nV3 V3.New(number x, number y, number z)"
        },
        "RotationToDirection": {
            "Description": "Takes a rotation and returns a direction.",
            "Example": "V3 V3.RotationToDirection(V3 vector)"
        },
        "Subtract": {
            "Description": "Subtract a value from a V3.",
            "Example": "V3 V3.Subtract(V3 vector, number value)\nV3 V3.Subtract(V3 vector, V3 value)"
        },
        "x": null,
        "y": null,
        "z": null
    },
    "V4": {
        "New": {
            "Description": "Create a new V4 object.",
            "Example": "V4 V4.New()\nV4 V4.New(number x, number y, number z, number w)"
        },
        "w": null,
        "x": null,
        "y": null,
        "z": null
    },
    "eCallbackTrigger": {
        "OnNewVehicle": null,
        "OnPlayerJoin": null,
        "OnPlayerLeave": null,
        "OnPlayerPedChange": null,
        "OnPlayerPedRespawn": null,
        "OnPostPresent": null,
        "OnPresent": null,
        "OnSessionChange": null,
        "OnTick": null,
        "OnWeaponChange": null,
        "OnWeaponReloaded": null
    },
    "eCurlCode": {
        "CURLE_COULDNT_CONNECT": null,
        "CURLE_COULDNT_RESOLVE_HOST": null,
        "CURLE_COULDNT_RESOLVE_PROXY": null,
        "CURLE_FAILED_INIT": null,
        "CURLE_FTP_WEIRD_SERVER_REPLY": null,
        "CURLE_NOT_BUILT_IN": null,
        "CURLE_OK": null,
        "CURLE_OUT_OF_MEMORY": null,
        "CURLE_REMOTE_ACCESS_DENIED": null,
        "CURLE_UNSUPPORTED_PROTOCOL": null,
        "CURLE_URL_MALFORMAT": null
    },
    "eCurlOption": {
        "CURLOPT_CUSTOMREQUEST": null,
        "CURLOPT_HTTPAUTH": null,
        "CURLOPT_NOPROGRESS": null,
        "CURLOPT_POST": null,
        "CURLOPT_POSTFIELDS": null,
        "CURLOPT_URL": null,
        "CURLOPT_USERAGENT": null,
        "CURLOPT_WRITEDATA": null,
        "CURLOPT_WRITEFUNCTION": null,
        "CURLOPT_XFERINFODATA": null,
        "CURLOPT_XFERINFOFUNCTION": null,
        "CURLOPT_XOAUTH2_BEARER": null
    },
    "eEntityType": {
        "BUILDING": null,
        "COMPOSITE": null,
        "DUMMY_OBJECT": null,
        "GRASS_INSTANCE_LIST": null,
        "INSTANCE_LIST": null,
        "LIGHT": null,
        "MLO": null,
        "NOTHING": null,
        "NOTINPOOLS": null,
        "OBJECT": null,
        "PARTICLESYSTEM": null,
        "PED": null,
        "PORTAL": null,
        "TOTAL": null,
        "VEHICLE": null,
        "VEHICLEGLASSCOMPONENT": null
    },
    "eFeatureType": {
        "Button": null,
        "Combo": null,
        "ComboToggles": null,
        "Custom": null,
        "InputColor3": null,
        "InputColor4": null,
        "InputFloat": null,
        "InputInt": null,
        "InputText": null,
        "List": null,
        "ListWithInfo": null,
        "SliderFloat": null,
        "SliderFloatToggle": null,
        "SliderInt": null,
        "SliderIntToggle": null,
        "Toggle": null
    },
    "eGuiMode": {
        "Both": null,
        "ClickGUI": null,
        "ListGUI": null
    },
    "eLogColor": {
        "BLUE": null,
        "BROWN": null,
        "CYAN": null,
        "DARKGRAY": null,
        "GREEN": null,
        "INTENSIFY": null,
        "LIGHTBLUE": null,
        "LIGHTCYAN": null,
        "LIGHTGRAY": null,
        "LIGHTGREEN": null,
        "LIGHTMAGENTA": null,
        "LIGHTRED": null,
        "MAGENTA": null,
        "RED": null,
        "WHITE": null,
        "YELLOW": null
    },
    "eLuaEvent": {
        "NET_EVENT": null,
        "ON_CHAT_MESSAGE": null,
        "ON_PLAYER_JOIN": null,
        "ON_PLAYER_LEFT": null,
        "ON_PLAYER_PED_CHANGE": null,
        "ON_PLAYER_PED_RESPAWN": null,
        "ON_POST_PRESENT": null,
        "ON_PRESENT": null,
        "ON_REACTION": null,
        "ON_SESSION_CHANGE": null,
        "ON_SYNC_DATA_NODE": null,
        "ON_UNLOAD": null,
        "ON_VEHICLE_CHANGE": null,
        "ON_WEAPON_CHANGE": null,
        "ON_WEAPON_RELOADED": null,
        "SCRIPTED_GAME_EVENT": null,
        "SHOULD_COLLIDE": null,
        "SHOULD_TRIGGER_EXCLUSIVE_SYNC": null
    },
    "ePlayerListSort": {
        "ALPHABETICAL": null,
        "DISTANCE": null,
        "HOST_QUEUE": null,
        "PLAYER_ID": null
    },
    "eProtectionType": {
        "AIMING_AT_YOU": null,
        "BAD_SCRIPT_EVENT": null,
        "CHAT_BANNED_WORD": null,
        "CHAT_SPAM": null,
        "CRASH": null,
        "KICK": null,
        "REPORT": null,
        "SHOOTING_AT_YOU": null,
        "SPECTATING_YOU": null,
        "UNKNOWN": null,
        "VOTE_KICK": null
    },
    "eReportReason": {
        "CODE_TAMPERING": null,
        "CRC_CODE_CRCS": null,
        "CRC_COMPROMISED": null,
        "CRC_EXE_SIZE": null,
        "CRC_NOT_REPLIED": null,
        "CRC_REQUEST_FLOOD": null,
        "GAME_SERVER_CASH_BANK": null,
        "GAME_SERVER_CASH_WALLET": null,
        "GAME_SERVER_INVENTORY": null,
        "GAME_SERVER_SERVER_INTEGRITY": null,
        "SCRIPT_CHEAT_DETECTION": null,
        "TELEMETRY_BLOCK": null
    },
    "eSyncDataNode": {
        "CAutomobileCreationDataNode": null,
        "CBikeGameStateDataNode": null,
        "CBoatGameStateDataNode": null,
        "CDoorCreationDataNode": null,
        "CDoorMovementDataNode": null,
        "CDoorScriptGameStateDataNode": null,
        "CDoorScriptInfoDataNode": null,
        "CDynamicEntityGameStateDataNode": null,
        "CEntityOrientationDataNode": null,
        "CEntityScriptGameStateDataNode": null,
        "CEntityScriptInfoDataNode": null,
        "CGlobalFlagsDataNode": null,
        "CHeliControlDataNode": null,
        "CHeliHealthDataNode": null,
        "CMigrationDataNode": null,
        "CObjectCreationDataNode": null,
        "CObjectGameStateDataNode": null,
        "CObjectOrientationNode": null,
        "CObjectScriptGameStateDataNode": null,
        "CObjectSectorPosNode": null,
        "CPedAIDataNode": null,
        "CPedAppearanceDataNode": null,
        "CPedAttachDataNode": null,
        "CPedComponentReservationDataNode": null,
        "CPedCreationDataNode": null,
        "CPedGameStateDataNode": null,
        "CPedHealthDataNode": null,
        "CPedInventoryDataNode": null,
        "CPedMovementDataNode": null,
        "CPedMovementGroupDataNode": null,
        "CPedOrientationDataNode": null,
        "CPedScriptCreationDataNode": null,
        "CPedScriptGameStateDataNode": null,
        "CPedSectorPosMapNode": null,
        "CPedSectorPosNavMeshNode": null,
        "CPedTaskSequenceDataNode": null,
        "CPedTaskSpecificDataNode": null,
        "CPedTaskTreeDataNode": null,
        "CPhysicalAngVelocityDataNode": null,
        "CPhysicalAttachDataNode": null,
        "CPhysicalGameStateDataNode": null,
        "CPhysicalHealthDataNode": null,
        "CPhysicalMigrationDataNode": null,
        "CPhysicalScriptGameStateDataNode": null,
        "CPhysicalScriptMigrationDataNode": null,
        "CPhysicalVelocityDataNode": null,
        "CPickupCreationDataNode": null,
        "CPickupPlacementCreationDataNode": null,
        "CPickupPlacementStateDataNode": null,
        "CPickupScriptGameStateNode": null,
        "CPickupSectorPosNode": null,
        "CPlaneControlDataNode": null,
        "CPlaneGameStateDataNode": null,
        "CPlayerAmbientModelStreamingNode": null,
        "CPlayerAppearanceDataNode": null,
        "CPlayerCameraDataNode": null,
        "CPlayerCreationDataNode": null,
        "CPlayerExtendedGameStateNode": null,
        "CPlayerGameStateDataNode": null,
        "CPlayerGamerDataNode": null,
        "CPlayerPedGroupDataNode": null,
        "CPlayerSectorPosNode": null,
        "CPlayerWantedAndLOSDataNode": null,
        "CSectorDataNode": null,
        "CSectorPositionDataNode": null,
        "CSubmarineControlDataNode": null,
        "CSubmarineGameStateDataNode": null,
        "CTrainGameStateDataNode": null,
        "CVehicleAngVelocityDataNode": null,
        "CVehicleAppearanceDataNode": null,
        "CVehicleComponentReservationDataNode": null,
        "CVehicleControlDataNode": null,
        "CVehicleCreationDataNode": null,
        "CVehicleDamageStatusDataNode": null,
        "CVehicleGadgetDataNode": null,
        "CVehicleGameStateDataNode": null,
        "CVehicleHealthDataNode": null,
        "CVehicleProximityMigrationDataNode": null,
        "CVehicleScriptGameStateDataNode": null,
        "CVehicleSteeringDataNode": null,
        "CVehicleTaskDataNode": null
    },
    "eToastPos": {
        "BOTTOM_LEFT": null,
        "BOTTOM_RIGHT": null,
        "TOP_LEFT": null,
        "TOP_RIGHT": null
    },
    "fwAttachmentEntityExtension": {
        "AttachChild": {
            "Example": "CPhysical object.AttachChild"
        },
        "AttachFlags": {
            "Example": "int object.AttachFlags"
        },
        "AttachOffset": {
            "Description": "This is world pos for constraints with world",
            "Example": "V3 object.AttachOffset"
        },
        "AttachParent": {
            "Example": "CPhysical object.AttachParent"
        },
        "AttachParentOffset": {
            "Description": "Attachment offset on parent",
            "Example": "V3 object.AttachParentOffset"
        },
        "AttachSibling": {
            "Example": "CPhysical object.AttachSibling"
        },
        "GetRotation": {
            "Example": "number x,y,z,w object:GetRotation()"
        },
        "MyAttachBone": {
            "Example": "int object.MyAttachBone"
        },
        "NoCollisionEntity": {
            "Example": "CPhysical object.NoCollisionEntity"
        },
        "OtherAttachBone": {
            "Example": "int object.OtherAttachBone"
        },
        "SetRotation": {
            "Example": "void object:SetRotation(number x, number y, number z, number w)"
        },
        "ThisEntity": {
            "Example": "CPhysical object.ThisEntity"
        }
    }
}